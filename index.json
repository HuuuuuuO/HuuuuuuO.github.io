[{"author":null,"categories":["Tech"],"content":"","date":1712584612,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1712587057,"objectID":"0f236ecbf1d3879896bbef61e9fca97a","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/","publishdate":"2024-04-08T21:56:52+08:00","readingtime":3,"relpermalink":"/post/hugo%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/","section":"post","summary":"1 显示效果 给hugo博客添加天气预报的效果，其实不只是给hugo，所有博客都是通用的。 我自己想要一打开就能看到天气，所以增加了这个功能。可以","tags":["hugo","天气预报","博客改造"],"title":"Hugo：添加天气预报","type":"post","url":"/post/hugo%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/","weight":0,"wordcount":1134},{"author":null,"categories":["Tech"],"content":"","date":1712250329,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1712255794,"objectID":"e792347c304e9f42584b4c69bf629289","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E5%8F%B0%E8%AF%8D%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA/","publishdate":"2024-04-05T01:05:29+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%A2%9E%E5%8A%A0%E5%8F%B0%E8%AF%8D%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA/","section":"post","summary":"1 显示效果 2 解决方法 因为没找到这种台词的接口，于是就去网上搜罗了一堆放在csv里面，然后页面刷新的时候自动从csv中抽取一行台词进行展示。分","tags":["hugo","博客改造"],"title":"Hugo：增加台词随机展示","type":"post","url":"/post/hugo%E5%A2%9E%E5%8A%A0%E5%8F%B0%E8%AF%8D%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA/","weight":0,"wordcount":431},{"author":null,"categories":["Tech"],"content":"","date":1712234001,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1712234246,"objectID":"7538ef6fcb9a7a8e43cce469f6ed8836","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%A9%BA%E6%A0%BC/","publishdate":"2024-04-04T20:33:21+08:00","readingtime":1,"relpermalink":"/post/hugo%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%A9%BA%E6%A0%BC/","section":"post","summary":"1 显示效果 中英文之间auto自动加空格 2 解决方法 可以使用 盘古之白 在文件layouts\\partials\\footer.html中，加入以下代","tags":["hugo"],"title":"Hugo：中英文之间自动加空格","type":"post","url":"/post/hugo%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%A9%BA%E6%A0%BC/","weight":0,"wordcount":121},{"author":null,"categories":["Tech"],"content":"Hugo的归档显示改为年月日统计","date":1712224593,"description":"Hugo的归档显示改为年月日统计","dir":"post\\","excerpt_html":"Hugo的归档显示改为年月日统计","excerpt_text":"Hugo的归档显示改为年月日统计","expirydate":-62135596800,"fuzzywordcount":400,"html":"Hugo的归档显示改为年月日统计","keywords":null,"kind":"page","lang":"en","lastmod":1712240266,"objectID":"9ab438d09db5296eb018402dbf556f18","permalink":"https://huuuuuuo.github.io/post/hugo%E5%BD%92%E6%A1%A3%E6%94%B9%E4%B8%BA%E5%B9%B4%E6%9C%88%E7%BB%9F%E8%AE%A1/","publishdate":"2024-04-04T17:56:33+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%BD%92%E6%A1%A3%E6%94%B9%E4%B8%BA%E5%B9%B4%E6%9C%88%E7%BB%9F%E8%AE%A1/","section":"post","summary":"1 显示效果 在归档archive页面中，我将归档显示方式改为先按日，再按月和年来统计。 2 解决方法 在文件 layouts\\_default\\archive.html 中修改统计方式： 重点是 第一个按年分组要","tags":["hugo"],"title":"Hugo：归档改为年月日统计","type":"post","url":"/post/hugo%E5%BD%92%E6%A1%A3%E6%94%B9%E4%B8%BA%E5%B9%B4%E6%9C%88%E7%BB%9F%E8%AE%A1/","weight":0,"wordcount":311},{"author":null,"categories":["Tech"],"content":"Hugo实现顶部阅读进度条功能","date":1712061866,"description":"Hugo实现顶部阅读进度条功能","dir":"post\\","excerpt_html":"Hugo实现顶部阅读进度条功能","excerpt_text":"Hugo实现顶部阅读进度条功能","expirydate":-62135596800,"fuzzywordcount":300,"html":"Hugo实现顶部阅读进度条功能","keywords":null,"kind":"page","lang":"en","lastmod":1712063426,"objectID":"9bba5a7773b4de0d20e11ceb3850ca7a","permalink":"https://huuuuuuo.github.io/post/hugo%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/","publishdate":"2024-04-02T20:44:26+08:00","readingtime":1,"relpermalink":"/post/hugo%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/","section":"post","summary":"1 显示效果 今天突然想起来可以搞一个阅读进度条的功能，还挺好看的，通过一番搜寻找到了一个很不错的解决方案，最终实现效果如下： 2 解决方案 要实现在","tags":["hugo"],"title":"Hugo：阅读进度条","type":"post","url":"/post/hugo%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/","weight":0,"wordcount":257},{"author":null,"categories":["Tech"],"content":"","date":1711956492,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711974988,"objectID":"ba162133db8a620a8d0b4c2f0737e94f","permalink":"https://huuuuuuo.github.io/post/hugo%E5%B0%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/","publishdate":"2024-04-01T15:28:12+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%B0%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/","section":"post","summary":"1 显示效果 现在可以按照最后更新时间进行排序了 2 修改代码 在 layouts\\partials\\portfolio.html 中，将以下一行代码替换成后面三行。 原代码： 1\u0026lt;!-- {{ $paginator := .Paginate (where (where .Site.Pages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;) \u0026#34;IsPage\u0026#34; true) }} --\u0026gt; 替换成： 1{{ $sortedPages","tags":["hugo","lastmod"],"title":"Hugo：将首页文章按照最后修改时间显示","type":"post","url":"/post/hugo%E5%B0%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/","weight":0,"wordcount":139},{"author":null,"categories":["Tech"],"content":"","date":1711935954,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1700,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711974988,"objectID":"6a24bfbef4ff156922a65a9ff1b5b5b2","permalink":"https://huuuuuuo.github.io/post/hugo%E5%AD%A6%E4%B9%A0/","publishdate":"2024-04-01T09:45:54+08:00","readingtime":4,"relpermalink":"/post/hugo%E5%AD%A6%E4%B9%A0/","section":"post","summary":"此文章用于长期更新hugo学习的内容 1 模板 1├── layouts 2└── themes 3 └── mytheme 4 └── layouts 5 ├── 404.html // 404页面模板 6 ├── _default 7 │ ├── baseof.html // 默认的基","tags":["hugo"],"title":"Hugo学习笔记（长期更新）","type":"post","url":"/post/hugo%E5%AD%A6%E4%B9%A0/","weight":0,"wordcount":1601},{"author":null,"categories":["Tech"],"content":"","date":1711932015,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711974988,"objectID":"b6839164e24735f5d66accd7f3971ea1","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2/","publishdate":"2024-04-01T08:40:15+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%A2%9E%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2/","section":"post","summary":"想要在网站上做几个新页面","tags":["hugo","增加新页面"],"title":"Hugo：增加新页面","type":"post","url":"/post/hugo%E5%A2%9E%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2/","weight":0,"wordcount":12},{"author":null,"categories":["Tech"],"content":"","date":1711887971,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711908697,"objectID":"24452958043601cf30d7e71cef42b371","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","publishdate":"2024-03-31T20:26:11+08:00","readingtime":4,"relpermalink":"/post/hugo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","section":"post","summary":"1 显示效果 可以看到在右上角有一个搜索图标，原本是这个主题带的，原本是点击以后会进入一个新的 search页面进行搜索，但是我用的时候发现这个功","tags":["hugo","搜索","fuse"],"title":"Hugo：增加搜索功能","type":"post","url":"/post/hugo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","weight":0,"wordcount":1982},{"author":null,"categories":["Tech"],"content":"","date":1711869783,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711878872,"objectID":"ca6a8eb9b615c73bae7a4e72ac37c513","permalink":"https://huuuuuuo.github.io/post/githubpages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/","publishdate":"2024-03-31T15:23:03+08:00","readingtime":1,"relpermalink":"/post/githubpages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/","section":"post","summary":"1 申请域名 可以去找个免费域名网站，我用的是： 域名申请或者购买成功了以后，我们还需要解析域名。 2 解析域名 输入ping xxx.github.io","tags":["githubpages","域名","dns"],"title":"GithubPages配置域名","type":"post","url":"/post/githubpages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/","weight":0,"wordcount":135},{"author":null,"categories":["Tech"],"content":"","date":1711866836,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711875379,"objectID":"89f8b462d6cfa89ae6d07c60e8679b5e","permalink":"https://huuuuuuo.github.io/post/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95cname%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88/","publishdate":"2024-03-31T14:33:56+08:00","readingtime":5,"relpermalink":"/post/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95cname%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88/","section":"post","summary":"今天想要给博客搞个域名，涉及了一大堆专业名词，在此记录一下。 1 域名 域名就是最常见的网址，比如 www.baidu.com ，因为ip地址不好记，所以用域名来代替，我们访","tags":["域名","A记录","CNAME","DNS"],"title":"域名、A记录、CNAME等都是什么","type":"post","url":"/post/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95cname%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88/","weight":0,"wordcount":2408},{"author":null,"categories":["Tech"],"content":"","date":1711801604,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711866861,"objectID":"d984774c675340fd0275a4ceb2240e77","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%B5%8F%E8%A7%88%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/","publishdate":"2024-03-30T20:26:44+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%B7%BB%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%B5%8F%E8%A7%88%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/","section":"post","summary":"偶然看见了一位大佬的博客 给 Hugo 博客添加随机文章入口 ，发现了他做了这个功能，感觉可以搞一下，于是借鉴了她的代码，感谢。 1 显示效果 在博客的右上角添","tags":["hugo","随机浏览"],"title":"Hugo：添加随机浏览文章功能","type":"post","url":"/post/hugo%E6%B7%BB%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%B5%8F%E8%A7%88%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/","weight":0,"wordcount":214},{"author":null,"categories":["Tech"],"content":"","date":1711785208,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711867637,"objectID":"664866d395d5deab061e8a0ec3f491e9","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%AD%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/","publishdate":"2024-03-30T15:53:28+08:00","readingtime":2,"relpermalink":"/post/hugo%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%AD%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/","section":"post","summary":"首先感谢 眠于水月间 大佬，文章主要收集于他的文章，[Hugo | 在 Stack 主题上可行的短代码们] 本文旨在收集一些有趣的短代码，因此主要是呈现使用方式，","tags":["hugo","shortcodes","短代码"],"title":"Hugo：一些有趣的短代码收集","type":"post","url":"/post/hugo%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%AD%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/","weight":0,"wordcount":907},{"author":null,"categories":["Tech"],"content":"","date":1711776731,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711974988,"objectID":"b1a2db90287447053a1e20099c6bab9e","permalink":"https://huuuuuuo.github.io/post/hugo%E6%96%87%E5%AD%97%E6%A0%87%E8%AE%B0/","publishdate":"2024-03-30T13:32:11+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%96%87%E5%AD%97%E6%A0%87%E8%AE%B0/","section":"post","summary":"1 显示效果 第一种，正经标记： 对文字进行标记 第二种，将文字放在代码里，利用代码的颜色来进行标记： 对文字进行标记 2 解决方案 首先，利用短代码，添加","tags":["hugo","mark","标记"],"title":"Hugo：文字标记","type":"post","url":"/post/hugo%E6%96%87%E5%AD%97%E6%A0%87%E8%AE%B0/","weight":0,"wordcount":201},{"author":null,"categories":["Tech"],"content":"","date":1711771186,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":800,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711778373,"objectID":"2f8d5d10e5c8d97ef28dca1789782e93","permalink":"https://huuuuuuo.github.io/post/hugo%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%90%8E%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","publishdate":"2024-03-30T11:59:46+08:00","readingtime":2,"relpermalink":"/post/hugo%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%90%8E%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","section":"post","summary":"1 显示效果 目前的显示效果如下，每篇文章可以正常显示最后修改时间。 但是之前， 这两个地方都是显示同一个时间，那就是最近一次 git 提交时间的8小时之前","tags":["hugo","lastmod"],"title":"Hugo：文章发布后最后修改时间不一致问题","type":"post","url":"/post/hugo%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%90%8E%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","weight":0,"wordcount":740},{"author":null,"categories":["Tech"],"content":"","date":1711735860,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711876118,"objectID":"4866736a48fc28151d59ffc1046ffd3b","permalink":"https://huuuuuuo.github.io/post/hugo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%A3%8E%E6%A0%BC/","publishdate":"2024-03-30T02:11:00+08:00","readingtime":2,"relpermalink":"/post/hugo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%A3%8E%E6%A0%BC/","section":"post","summary":"1 代码高亮风格 代码高亮风格很多，可以参见 Chroma Style Gallery 看起来都不错，可以考虑添加进 hugo 2 遇到问题 之前我已经在 config.toml 中已经添加如下配置： 1[markup] 2 [markup.highlight] 3 codeFences = true 4 guessSyntax =","tags":["hugo","代码高亮","Chroma Style Gallery"],"title":"Hugo：代码高亮风格","type":"post","url":"/post/hugo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%A3%8E%E6%A0%BC/","weight":0,"wordcount":591},{"author":null,"categories":["Tech"],"content":"","date":1711734194,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711739373,"objectID":"10b5d7cb6adad9f1ec1fef3c6408ca6b","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E7%83%AD%E5%8A%9B%E5%9B%BE/","publishdate":"2024-03-30T01:43:14+08:00","readingtime":2,"relpermalink":"/post/hugo%E6%B7%BB%E5%8A%A0%E7%83%AD%E5%8A%9B%E5%9B%BE/","section":"post","summary":"1 显示效果 鼠标未移动到上面的时候，根据发表文章的数量显示热力图： 如果鼠标移动到上面，会显示当天发表的文章详情，并且可以点击进行跳转： 2 解决方","tags":["hugo","热力图"],"title":"Hugo：添加热力图","type":"post","url":"/post/hugo%E6%B7%BB%E5%8A%A0%E7%83%AD%E5%8A%9B%E5%9B%BE/","weight":0,"wordcount":867},{"author":null,"categories":["Tech"],"content":"","date":1711646170,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":["hugo","图片放大","灯箱","fancybox"],"kind":"page","lang":"en","lastmod":1711739553,"objectID":"bc0e7d3f6905fece5531bdf8a9d456c7","permalink":"https://huuuuuuo.github.io/post/hugo%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","publishdate":"2024-03-29T01:16:10+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","section":"post","summary":"1 显示效果 想要知乎这种图片点击放大的效果，一查才知道是灯箱。 2 解决方案 2.1 修改 config.toml 在 config.toml文件中，添加如下代码： 1[params] 2 fancybox = true 2.2 创建","tags":["hugo","图片放大","灯箱","fancybox"],"title":"Hugo：图片点击放大","type":"post","url":"/post/hugo%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","weight":0,"wordcount":188},{"author":null,"categories":["Tech"],"content":"","date":1711608947,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711625178,"objectID":"e57543c6b97c45742a0c0a0e954e08ef","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/","publishdate":"2024-03-28T14:55:47+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/","section":"post","summary":"1 显示效果 2 解决方案 我正在使用的主题所提供的评论方案是： 1 [params.giscus] 2 data_repo=\u0026#34;your GitHub repo\u0026#34; 3 data_repo_id=\u0026#34;your repo id\u0026#34; 4 data_category=\u0026#34;your category\u0026#34; 5 data_category_id=\u0026#34;your category id\u0026#34; 6 data_mapping=\u0026#34;pathname\u0026#34; 7 data_reactions_enabled=\u0026#34;1\u0026#34; 8 data_emit_metadata=\u0026#34;0\u0026#34; 9 data_theme=\u0026#34;light\u0026#34; 10 data_lang=\u0026#34;en\u0026#34; 11 crossorigin=\u0026#34;anonymous\u0026#34; 在申请giscus 的时候，","tags":["hugo","评论","giscus"],"title":"Hugo：添加评论功能","type":"post","url":"/post/hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/","weight":0,"wordcount":251},{"author":null,"categories":["Tech"],"content":"","date":1711553028,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711787621,"objectID":"84db042cb3d1bb238270430264cd42d1","permalink":"https://huuuuuuo.github.io/post/hugo%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","publishdate":"2024-03-27T23:23:48+08:00","readingtime":3,"relpermalink":"/post/hugo%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","section":"post","summary":"1 目前显示效果 1git add . 2git commit -m \u0026#34;update\u0026#34; 3git push origin master 2 解决方案 2.1 内容折叠 新建 themes\\hugo-theme-cleanwhite\\layouts\\shortcodes\\details.html 文件，并添加以下代码： 1\u0026lt;details style=\u0026#34;background-color:#ffffff;border-radius:6px;border:2px dashed rgba(187, 181, 181, 0.712);\u0026#34;\u0026gt; 2 \u0026lt;summary\u0026gt; \u0026lt;font color=#817f7f\u0026gt; \u0026gt; \u0026gt; \u0026gt; 展开 \u0026gt; \u0026gt; \u0026gt; \u0026lt;/font\u0026gt;\u0026lt;/summary\u0026gt; 3 {{ .Inner | markdownify }} 4\u0026lt;/details\u0026gt; 以","tags":["hugo","折叠","代码块"],"title":"Hugo：内容折叠与代码块大小限制","type":"post","url":"/post/hugo%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","weight":0,"wordcount":1326},{"author":null,"categories":["Tech"],"content":"","date":1711550419,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711739418,"objectID":"725606181735d66cb3fd989646ff1bba","permalink":"https://huuuuuuo.github.io/post/hugo%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","publishdate":"2024-03-27T22:40:19+08:00","readingtime":1,"relpermalink":"/post/hugo%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","section":"post","summary":"显示效果 解决方案 本文使用 不蒜子 来进行网站访问量的统计 前期也踩了几个坑，最后在官网发现了最佳解决方案，只需要将官网上的两行代码稍加改进就可以在","tags":["hugo","访问量"],"title":"Hugo：访问量统计","type":"post","url":"/post/hugo%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","weight":0,"wordcount":392},{"author":null,"categories":["Tech"],"content":"","date":1711549646,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711550704,"objectID":"aec01b3379f370864dab32c4eff79680","permalink":"https://huuuuuuo.github.io/post/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","publishdate":"2024-03-27T22:27:26+08:00","readingtime":1,"relpermalink":"/post/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","section":"post","summary":"显示效果 解决方案 本博客使用的是 霞鹜文楷 ，要在网站使用此字体，可以查看 霞鹜文楷屏幕阅读版 网络字体仓库 1、插入代码 将以下代码插入 themes\\hugo-theme-cleanwhite\\layouts\\partials\\head.html 1\u0026lt;html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/style.css\u0026#34; /\u0026gt;","tags":["hugo","自定义","字体"],"title":"Hugo：自定义字体","type":"post","url":"/post/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","weight":0,"wordcount":208},{"author":null,"categories":["Tech"],"content":"","date":1711530928,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711546968,"objectID":"d778ae246021b388b63459ff0dd51a6a","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%80%E9%94%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/","publishdate":"2024-03-27T17:15:28+08:00","readingtime":1,"relpermalink":"/post/hugo%E4%B8%80%E9%94%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/","section":"post","summary":"文章参考自：https://github.com/sengmitnick/hugo-theme-hello-friend-ng/commit","tags":["hugo"],"title":"Hugo：一键回到顶部","type":"post","url":"/post/hugo%E4%B8%80%E9%94%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/","weight":0,"wordcount":368},{"author":null,"categories":["Tech"],"content":"","date":1711526703,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711546968,"objectID":"8d8e07debb6dcb0a509398def1e68509","permalink":"https://huuuuuuo.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","publishdate":"2024-03-27T16:05:03+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","section":"post","summary":"文章参考自 https://thirdshire.com/hugo-stack-renovation/ 显示效果 解决方案 1\u0026lt;!-- Add blog running time --\u0026gt; 2本博客已稳定运行 3\u0026lt;span id=\u0026#34;runningdays\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 4\u0026lt;script\u0026gt; 5let s1 = \u0026#39;2024-3-18\u0026#39;; //website start date 6s1 = new Date(s1.replace(/-/g, \u0026#34;/\u0026#34;)); 7let s2 = new Date(); 8let timeDifference = s2.getTime() - s1.getTime(); 9 10let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); 11let","tags":["hugo"],"title":"Hugo：博客运行时间","type":"post","url":"/post/hugo%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","weight":0,"wordcount":154},{"author":null,"categories":["Tech"],"content":"","date":1711525118,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711867648,"objectID":"8966776e7a9c9ada238d1f20b78bf50c","permalink":"https://huuuuuuo.github.io/post/hugo%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/","publishdate":"2024-03-27T15:38:38+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/","section":"post","summary":"文章参考自 https://thirdshire.com/hugo-stack-renovation/ 显示效果 解决方法 我是直接在主题上面改的，在主题的 layouts/partials/footer.html 里增加以下代码： 1\u0026lt;!-- 添加在copyright之前 --\u0026gt; 2 3\u0026lt;!-- Add total page and word count time --\u0026gt; 4{{$scratch := newScratch}} 5{{ range","tags":["hugo","字数统计"],"title":"Hugo：总字数统计","type":"post","url":"/post/hugo%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/","weight":0,"wordcount":116},{"author":null,"categories":["Tech"],"content":"","date":1711511059,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711781672,"objectID":"c44aa516db8f5b3ffcc23be61f107a60","permalink":"https://huuuuuuo.github.io/post/git%E4%B9%8B.gitignore%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","publishdate":"2024-03-27T11:44:19+08:00","readingtime":1,"relpermalink":"/post/git%E4%B9%8B.gitignore%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","section":"post","summary":"文章转载修改自：https://blog.csdn.net/wwwtotoro/article/details/91042307 在根目录中新","tags":["git","gitignore"],"title":"Git：.gitignore无效解决方法","type":"post","url":"/post/git%E4%B9%8B.gitignore%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","weight":0,"wordcount":208},{"author":null,"categories":["Tech"],"content":"","date":1711505767,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711546968,"objectID":"e1183f2dc35b553f2773d828d71f404e","permalink":"https://huuuuuuo.github.io/post/python%E6%97%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","publishdate":"2024-03-27T10:16:07+08:00","readingtime":1,"relpermalink":"/post/python%E6%97%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","section":"post","summary":"1、背景 有一个程序，使用asp、mysql、python实现，想要实现在另一台windows环境部署，需要将部署方法最简化。 目前考虑的方案是","tags":["python","windows","access"],"title":"Python无环境部署","type":"post","url":"/post/python%E6%97%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","weight":0,"wordcount":91},{"author":null,"categories":["Tech"],"content":"","date":1711018526,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711105034,"objectID":"801a7e870b84e0512842736ce3ebda76","permalink":"https://huuuuuuo.github.io/post/hugo%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/","publishdate":"2024-03-21T18:55:26+08:00","readingtime":1,"relpermalink":"/post/hugo%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/","section":"post","summary":"使用hugo搭建博客的时候，md文件的图片存储路径有问题，对其进行改进 1、typora配置 图像存储路径改为如图，其中是以相对路径 ./ 开头 2、用","tags":["hugo","优化","脚本"],"title":"Hugo：图片存储路径优化","type":"post","url":"/post/hugo%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/","weight":0,"wordcount":312},{"author":null,"categories":["Tech"],"content":"","date":1710997968,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711553173,"objectID":"e9a2392476a5554e132dfbca2b9dca70","permalink":"https://huuuuuuo.github.io/post/hugo%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/","publishdate":"2024-03-21T13:12:48+08:00","readingtime":1,"relpermalink":"/post/hugo%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/","section":"post","summary":"本文转载与修改自：Hugo插件之代码块拷贝插件 添加按钮-css 我们通过检查博客内容页面发现，hugo生成的每个代码块格式如下： 没有语法突出显","tags":["hugo","copy","代码块"],"title":"Hugo：代码块拷贝","type":"post","url":"/post/hugo%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/","weight":0,"wordcount":486},{"author":null,"categories":["Tech"],"content":"","date":1710992202,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711105034,"objectID":"2a18229f2d9a478d682323f5c2a084f2","permalink":"https://huuuuuuo.github.io/post/%E8%BF%9E%E6%8E%A5github%E6%97%B6connection-reset%E7%9A%84%E9%97%AE%E9%A2%98/","publishdate":"2024-03-21T11:36:42+08:00","readingtime":1,"relpermalink":"/post/%E8%BF%9E%E6%8E%A5github%E6%97%B6connection-reset%E7%9A%84%E9%97%AE%E9%A2%98/","section":"post","summary":"git连接时遇到问题 1ssh -T git@github.com 2Connection reset by 140.82.113.3 port 22 解决方案 在所生成ssh秘钥文件夹下（~/.ssh/）使用文本文档新建 config文件（无后缀）。 修改代","tags":["git","reset","ssh","git bug"],"title":"连接github时connection reset的问题","type":"post","url":"/post/%E8%BF%9E%E6%8E%A5github%E6%97%B6connection-reset%E7%9A%84%E9%97%AE%E9%A2%98/","weight":0,"wordcount":175},{"author":null,"categories":["Tech"],"content":"","date":1710945042,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711742405,"objectID":"92fdbb87f0a4bd1f777338d973c30bd1","permalink":"https://huuuuuuo.github.io/post/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","publishdate":"2024-03-20T22:30:42+08:00","readingtime":1,"relpermalink":"/post/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","section":"post","summary":"本地编辑md我用的是typora，用一些快捷键会更好用 设置标题 ctrl + 1 ~6 标题1~6 等同于 一级标题：#+空格+标题内容 二级标题：##+空格+标题","tags":["typora","快捷键"],"title":"Typora快捷键","type":"post","url":"/post/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","weight":0,"wordcount":335},{"author":null,"categories":["Tech"],"content":"","date":1710937842,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":800,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711105034,"objectID":"2d17061a1bfccc1e03c911016720427d","permalink":"https://huuuuuuo.github.io/post/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","publishdate":"2024-03-20T20:30:42+08:00","readingtime":2,"relpermalink":"/post/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","section":"post","summary":"Git是一个分布式版本控制系统，用于跟踪文件的更改，协作开发，以及管理项目的版本。 index：暂存区 workspace：工作区 resposi","tags":["git"],"title":"git基本使用","type":"post","url":"/post/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","weight":0,"wordcount":734},{"author":null,"categories":["Tech"],"content":"","date":1710927042,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711105034,"objectID":"d8dd340e5564597b9bdd40a58cea2a60","permalink":"https://huuuuuuo.github.io/post/hugo%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/","publishdate":"2024-03-20T17:30:42+08:00","readingtime":2,"relpermalink":"/post/hugo%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/","section":"post","summary":"1、新建文章 进入blog本地仓库，新疆文章，写文章并修改 1cd F:\\vscode\\hugo-root 2hugo new post/文章名字.md 2、本地验证 1hugo serve -D --disableFastRender 2或 3hugo serve 3、更新public目录","tags":["hugo","github","pages"],"title":"Hugo：日常更新流程","type":"post","url":"/post/hugo%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/","weight":0,"wordcount":879},{"author":null,"categories":["Tech"],"content":"","date":1710892800,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":5000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711796603,"objectID":"e4ec200ac1035408afb950d1f4bd1865","permalink":"https://huuuuuuo.github.io/post/%E5%85%B3%E4%BA%8Egpt%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BD%B1%E5%93%8D%E8%BD%AC%E8%BD%BD-copy/","publishdate":"2024-03-20T00:00:00Z","readingtime":10,"relpermalink":"/post/%E5%85%B3%E4%BA%8Egpt%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BD%B1%E5%93%8D%E8%BD%AC%E8%BD%BD-copy/","section":"post","summary":"视频是关于GPT的底层原理和未来影响。将抛开技术细节，少用专业名词，在整体功能上讲解ChatGPT 的「工作原理」「制造过程」「涌现的能力」「","tags":["gpt","大模型","ai","人工智能","B站","视频"],"title":"关于GPT的底层原理和未来影响（转载）","type":"post","url":"/post/%E5%85%B3%E4%BA%8Egpt%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BD%B1%E5%93%8D%E8%BD%AC%E8%BD%BD-copy/","weight":0,"wordcount":4936},{"author":null,"categories":["Tech"],"content":"","date":1710892800,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":8900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711869819,"objectID":"bca0c1b924751b098cc380fd9d4c2fef","permalink":"https://huuuuuuo.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhugo+githubpages-copy/","publishdate":"2024-03-20T00:00:00Z","readingtime":18,"relpermalink":"/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhugo+githubpages-copy/","section":"post","summary":"本文借鉴并修改自 Windows下使用hugo和Github Pages配置博客 1 下载安装hugo 访问最新版本页面下载，推荐使用 Hugo extended 版本 解压到某","tags":["hugo","githubpages","博客搭建"],"title":"博客搭建：Hugo+GithubPages","type":"post","url":"/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhugo+githubpages-copy/","weight":0,"wordcount":8840},{"author":null,"categories":["Tech"],"content":"","date":1710892800,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711546968,"objectID":"60d011577caeb149e92a9f81075f9362","permalink":"https://huuuuuuo.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAjekyll+githubpages/","publishdate":"2024-03-20T00:00:00Z","readingtime":1,"relpermalink":"/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAjekyll+githubpages/","section":"post","summary":"Jekyll就是将纯文本转化为静态博客网站，不需要数据库支持，也没有评论功能，想要评论功能的话可以借助第三方的评论服务。 Jekyll + Github Pages可以","tags":["jekyll","githubpages"],"title":"博客搭建：Jekyll+GithubPages","type":"post","url":"/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAjekyll+githubpages/","weight":0,"wordcount":199},{"author":null,"categories":["Tech"],"content":"","date":1710847842,"description":"","dir":"post\\","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1711546968,"objectID":"d788f04c2b9fb683af008e1f857592b1","permalink":"https://huuuuuuo.github.io/post/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","publishdate":"2024-03-19T19:30:42+08:00","readingtime":3,"relpermalink":"/post/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","section":"post","summary":"1 failed to push some refs 报错 1git push -u origin main 2To https://github.com/xxxx.git 3 ! [rejected] main -\u0026gt; main (non-fast-forward) 4error: failed to push some refs to \u0026#39;https://github.com/xxxx.git\u0026#39; 5hint: Updates were rejected because the tip of your current branch is behind 6hint: its remote counterpart. Integrate the remote changes (e.g. 7hint: \u0026#39;git pull ...\u0026#39;) before pushing again. 8hint: See the \u0026#39;Note about fast-forwards\u0026#39; in \u0026#39;git push --help\u0026#39; for","tags":["git","branch","分支","git bug"],"title":"git push：本地分支和远程分支冲突问题解决","type":"post","url":"/post/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","weight":0,"wordcount":1089},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1711801525,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://huuuuuuo.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me Hello ~\nIf you\u0026rsquo;ve got something to say, just leave a comment😊 ~","tags":null,"title":"About","type":"page","url":"/about/","weight":0,"wordcount":15},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"memos\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1711976806,"objectID":"bd34c6e5da3587c793cc94bbe9159905","permalink":"https://huuuuuuo.github.io/memos/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/memos/","section":"","summary":"","tags":null,"title":"Memos","type":"page","url":"/memos/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"movies\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1711978213,"objectID":"3417987f742739edfee9b601f3677c9d","permalink":"https://huuuuuuo.github.io/movies/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/movies/","section":"","summary":"","tags":null,"title":"Movies","type":"page","url":"/movies/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive\\","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":1711974988,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://huuuuuuo.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Timeline","type":"archive","url":"/archive/","weight":0,"wordcount":0},{"categories":["Tech"],"contents":"1 显示效果 给hugo博客添加天气预报的效果，其实不只是给hugo，所有博客都是通用的。\n我自己想要一打开就能看到天气，所以增加了这个功能。可以根据你的IP显示城市，并且显示未来几天的天气预报。\n显示效果是这样的：\n2 解决方案 2.1 天气查询api 要显示天气就必须有天气预报的api，查了一下发现高德开放平台有天气的api 天气查询 ，于是就开始马不停蹄地添加到博客上。\n2.1.1 申请key 首先，打开高德开放平台注册账号，或者用高德地图扫码。\n然后，进入控制台，选择创建新应用，应用类型选择天气。\n创建好应用以后，选择右上角的添加key，然后 服务平台中选择web服务就行了。可以看到下面的可使用服务是很广的，这一个key就可以同时用于这些服务上面。\n提交以后，就会显示你的key，这个key就可以用在api的参数里面了。\n2.1.2 api使用 api的使用就是按照api文档来就行了，其中key和city是必须的参数，city参数可以从城市编码表中获取。\n返回的结果有很多，在api文档也能看到，选取你需要的参数就行了。\n2.2 IP定位api 如果只需要固定显示一个地方的天气，那么直接在请求中硬编码输入城市的编码就行了，但是我想要自动定位IP，那么就可以用到高德开放平台的另一个api，IP定位 。\n必填的参数就一个，你的key。刚才申请的key也可以用于这里。\n2.3 页面展示 添加\\layouts\\partials\\weather.html，完整的html代码在下面，将api里面的yourkey替换成你自己的key就可以了。\n1\u0026lt;style\u0026gt; 2 .weatherReport { 3 font-size: 15px; 4 color: #1f373c8c; 5 } 6\u0026lt;/style\u0026gt; 7\u0026lt;h5 class=\u0026#34;locationInfo\u0026#34; id=\u0026#34;locationInfo\u0026#34;\u0026gt;\u0026lt;/h5\u0026gt; 8\u0026lt;span class=\u0026#34;weatherReport\u0026#34; id=\u0026#34;weatherReport\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 9 10\u0026lt;script\u0026gt; 11 const apicityUrl = \u0026#39;https://restapi.amap.com/v3/ip?key=yourkey\u0026#39;; 12 const apiUrlTemplate = \u0026#39;https://restapi.amap.com/v3/weather/weatherInfo?city={adcode}\u0026amp;key=yourkey\u0026#39;; 13 14 fetch(apicityUrl) 15 .then(response =\u0026gt; response.json()) 16 .then(data =\u0026gt; { 17 const province = data.province; 18 const city = data.city; 19 const adcode = data.adcode; 20 21 // 显示省份和城市信息 22 document.getElementById(\u0026#39;locationInfo\u0026#39;).innerHTML = `WEATHER | ${province} ${city}`; 23 24 // 将 adcode 插入到 apiUrl 中 25 const apiUrl = apiUrlTemplate.replace(\u0026#39;{adcode}\u0026#39;, adcode); 26 27 // 使用新的 apiUrl 获取天气信息 28 return fetch(apiUrl); 29 }) 30 .then(response =\u0026gt; response.json()) 31 .then(data =\u0026gt; { 32 if (data.status === \u0026#34;1\u0026#34; \u0026amp;\u0026amp; data.count === \u0026#34;1\u0026#34;) { 33 const forecast = data.forecasts[0]; 34 const reportTime = forecast.reporttime; 35 const city = forecast.city; 36 const province = forecast.province; 37 38 let weatherReport = ``; 39 40 forecast.casts.forEach((cast, index) =\u0026gt; { 41 const date = cast.date; 42 const parts = date.split(\u0026#34;-\u0026#34;); 43 const newDate = parts.slice(1).join(\u0026#34;-\u0026#34;); 44 const nightWeather = cast.nightweather; 45 const dayWeather = cast.dayweather; 46 const daytemp = cast.daytemp; 47 const nighttemp = cast.nighttemp; 48 49 // 检查是否是第一个预报 50 if (index === 0) { 51 // 如果是第一个预报，不添加 \u0026lt;br\u0026gt; 52 weatherReport += `${newDate}\u0026lt;br\u0026gt;日夜温度: ${daytemp} ~ ${nighttemp}℃\u0026lt;br\u0026gt;日夜天气: ${nightWeather} ~ ${dayWeather}\u0026lt;br\u0026gt;`; 53 } else { 54 // 如果不是第一个预报，添加 \u0026lt;br\u0026gt; 55 weatherReport += `\u0026lt;br\u0026gt;${newDate}\u0026lt;br\u0026gt;日夜温度: ${daytemp} ~ ${nighttemp}℃\u0026lt;br\u0026gt;日夜天气: ${nightWeather} ~ ${dayWeather}\u0026lt;br\u0026gt;`; 56 } 57 }); 58 59 60 document.getElementById(\u0026#39;weatherReport\u0026#39;).innerHTML = weatherReport; 61 } else { 62 console.error(\u0026#39;Error fetching weather data\u0026#39;); 63 } 64 }) 65 .catch(error =\u0026gt; console.error(\u0026#39;Error:\u0026#39;, error)); 66\u0026lt;/script\u0026gt; 因为我是放在侧边栏，所以在\\layouts\\partials\\sidebar.html文件中，添加以下代码：\n1\u0026lt;!-- WEATHER --\u0026gt; 2\u0026lt;section\u0026gt; 3 \u0026lt;hr\u0026gt; 4{{ partial \u0026#34;weather\u0026#34; . }} 5\u0026lt;/section\u0026gt; 如果想放在别的位置，也可以自己调整位置。\n以上。\n","date":"2024-04-08T21:56:52+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/","section":"post","tags":["hugo","天气预报","博客改造"],"title":"Hugo：添加天气预报"},{"categories":["Tech"],"contents":"1 显示效果 2 解决方法 因为没找到这种台词的接口，于是就去网上搜罗了一堆放在csv里面，然后页面刷新的时候自动从csv中抽取一行台词进行展示。分为html代码和js代码，其中progress.js代码如下：\n1document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { 2 fetch(\u0026#39;/data/douban/quote.csv\u0026#39;) 3 .then(response =\u0026gt; response.text()) 4 .then(data =\u0026gt; { 5 const lines = data.split(\u0026#39;\\n\u0026#39;); 6 const quotes = lines.slice(1).map(line =\u0026gt; line.split(\u0026#39;,\u0026#39;)); 7 const randomQuote = quotes[Math.floor(Math.random() * quotes.length)]; 8 document.getElementById(\u0026#39;quote\u0026#39;).textContent = randomQuote[0]; 9 document.getElementById(\u0026#39;source\u0026#39;).textContent = randomQuote[1] ? \u0026#39;——\u0026#39; + randomQuote[1] : \u0026#39;\u0026#39;; 10 11 12 console.log(randomQuote[0],randomQuote[1]); 13 14 }); 15 }); 在html中添加：\n1\u0026lt;style\u0026gt; 2.quote-container { 3 color: #fdfdfd7d; 4 position: relative; 5 width: 100%; 6 height: 100px; 7 border: 0px solid #ccc; 8 padding: 0px; 9 box-sizing: border-box; 10} 11.quote { 12 position: absolute; 13 top: 0; 14 left: 0; 15} 16.source { 17 position: absolute; 18 bottom: 0; 19 right: 0; 20 text-align: right; 21} 22\u0026lt;/style\u0026gt; 23\u0026lt;div class=\u0026#34;quote-container\u0026#34;\u0026gt; 24\u0026lt;span class=\u0026#34;quote\u0026#34; id=\u0026#34;quote\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 25\u0026lt;span class=\u0026#34;source\u0026#34; id=\u0026#34;source\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 26\u0026lt;/div\u0026gt; 27\u0026lt;script src=\u0026#34;/js/progress.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 这样就可以了，然后当页面刷新的时候，就会随机展示一句电影台词了~\n3 接口更新 找到了一个接口 一言 ，使用接口进行台词的随机展示，这个接口就不仅仅是电影台词了，还有很多类型比如：动画、漫画、游戏、原创文学、影视、诗词、网易云、哲学、抖机灵等等。\n然后可以把js代码改为：\n1document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { 2 fetch(\u0026#39;https://v1.hitokoto.cn\u0026#39;) 3 .then(response =\u0026gt; response.json()) 4 .then(data =\u0026gt; { 5 document.getElementById(\u0026#39;quote\u0026#39;).textContent = data.hitokoto; 6 document.getElementById(\u0026#39;source\u0026#39;).textContent = \u0026#39;—— \u0026#39; + data.from; 7 }) 8 .catch(error =\u0026gt; console.error(\u0026#39;Error:\u0026#39;, error)); 9 }); 这样就可以用这个接口的内容来随机展示了。\n","date":"2024-04-05T01:05:29+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E5%8F%B0%E8%AF%8D%E9%9A%8F%E6%9C%BA%E6%98%BE%E7%A4%BA/","section":"post","tags":["hugo","博客改造"],"title":"Hugo：增加台词随机展示"},{"categories":["Tech"],"contents":"1 显示效果 中英文之间auto自动加空格\n2 解决方法 可以使用 盘古之白\n在文件layouts\\partials\\footer.html中，加入以下代码即可：\n1\u0026lt;script\u0026gt; 2 (function(u, c) { 3 var d = document, t = \u0026#39;script\u0026#39;, o = d.createElement(t), 4 s = d.getElementsByTagName(t)[0]; 5 o.src = u; 6 if (c) { o.addEventListener(\u0026#39;load\u0026#39;, function(e) { c(e); }); } 7 s.parentNode.insertBefore(o, s); 8 })(\u0026#39;//cdn.bootcss.com/pangu/3.3.0/pangu.min.js\u0026#39;, function() { 9 pangu.spacingPage(); 10 }); 11 \u0026lt;/script\u0026gt; ","date":"2024-04-04T20:33:21+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%AD%E8%8B%B1%E6%96%87%E4%B9%8B%E9%97%B4%E8%87%AA%E5%8A%A8%E5%8A%A0%E7%A9%BA%E6%A0%BC/","section":"post","tags":["hugo"],"title":"Hugo：中英文之间自动加空格"},{"categories":["Tech"],"contents":"1 显示效果 在归档archive页面中，我将归档显示方式改为先按日，再按月和年来统计。\n2 解决方法 在文件 layouts\\_default\\archive.html 中修改统计方式：\n重点是 第一个按年分组要使用$pages， {{ range $pages.GroupByDate \u0026quot;2006\u0026quot; }}\n按月分组和按日分组要使用.Pages，这表示前面按年分组之后的结果，之后使用 {{ range .Pages.GroupByDate \u0026quot;01\u0026quot; }} 和 {{ range .Pages.GroupByDate \u0026quot;01-02\u0026quot; }} 。\n1\u0026lt;div class=\u0026#34;archive-list\u0026#34;\u0026gt; 2 3 \u0026lt;section\u0026gt; 4 {{ range $pages.GroupByDate \u0026#34;2006\u0026#34; }} 5 \u0026lt;h1 class=\u0026#34;title is-4 has-text-weight-normal\u0026#34; style=\u0026#34;position: relative; display: inline-block; padding-right: 30px;\u0026#34;\u0026gt;{{ .Key }} 6 \u0026lt;span style=\u0026#34;position: absolute; top: 0; right: 0; font-size: 15px; color: #666;\u0026#34;\u0026gt;{{ len .Pages }}\u0026lt;/span\u0026gt; 7 \u0026lt;/h1\u0026gt; 8 \u0026lt;hr\u0026gt; 9 \u0026lt;/section\u0026gt; 10 11 \u0026lt;section\u0026gt; 12 {{ range .Pages.GroupByDate \u0026#34;01\u0026#34; }} 13 \u0026lt;h3 class=\u0026#34;title is-4 has-text-weight-normal\u0026#34; style=\u0026#34;position: relative; display: inline-block; padding-right: 30px;\u0026#34;\u0026gt;{{ .Key }} 14 \u0026lt;span style=\u0026#34;position: absolute; top: 0; right: 0; font-size: 15px; color: #666;\u0026#34;\u0026gt;{{ len .Pages }}\u0026lt;/span\u0026gt; 15 \u0026lt;/h3\u0026gt; 16 \u0026lt;hr\u0026gt; 17 \u0026lt;/section\u0026gt; 18 \u0026lt;section\u0026gt; 19 {{ range .Pages.GroupByDate \u0026#34;01-02\u0026#34; }} 20 \u0026lt;h3 class=\u0026#34;title is-4 has-text-weight-normal\u0026#34; style=\u0026#34;position: relative; display: inline-block; padding-right: 30px;\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;{{ .Key }} 21 \u0026lt;span style=\u0026#34;position: absolute; top: 0; right: 0; font-size: 15px; color: #666;\u0026#34;\u0026gt;{{ len .Pages }}\u0026lt;/span\u0026gt; 22 \u0026lt;/h3\u0026gt; 23 \u0026lt;/section\u0026gt; 24 25 \u0026lt;ul style=\t\u0026#34;background-position:1000px; padding-left:100px;\u0026#34;\u0026gt; 26 {{ range .Pages }} 27 \u0026lt;li \u0026gt; 28 29 \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt; 30 {{ .Title }} 31 \u0026lt;/a\u0026gt; 32 \u0026lt;/li\u0026gt; 33 {{ end }} 34 \u0026lt;/ul\u0026gt; 35 36 {{ end }} 37 {{ end }} 38 {{ end }} 39 \u0026lt;/div\u0026gt; ","date":"2024-04-04T17:56:33+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%BD%92%E6%A1%A3%E6%94%B9%E4%B8%BA%E5%B9%B4%E6%9C%88%E7%BB%9F%E8%AE%A1/","section":"post","tags":["hugo"],"title":"Hugo：归档改为年月日统计"},{"categories":["Tech"],"contents":"1 显示效果 今天突然想起来可以搞一个阅读进度条的功能，还挺好看的，通过一番搜寻找到了一个很不错的解决方案，最终实现效果如下：\n2 解决方案 要实现在所有页面上可以实现这个效果，可以将html代码插入到 layouts\\_default\\baseof.html 并引用css和js文件，若是只想在文章页面实现，可以插入到 layouts\\_default\\single.html\n2.1 html 1\u0026lt;progress id=\u0026#34;content_progress\u0026#34; value=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/progress\u0026gt; 2\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/progress.css\u0026#34;\u0026gt; 3\u0026lt;script src=\u0026#34;/js/progress.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2.2 css 1#content_progress { 2 /* Positioning */ 3 position: fixed; 4 left: 0; 5 top: 0; 6 z-index: 1000; 7 width: 100%; 8 height: 3px; 9 -webkit-appearance: none; 10 -moz-appearance: none; 11 appearance: none; 12 border: none; 13 background-color: transparent; 14 color: #0085a1; 15} 16 17#content_progress::-webkit-progress-bar { 18 background-color: transparent; 19} 20 21#content_progress::-webkit-progress-value { 22 background-color: #0085a1; 23} 24 25#content_progress::-moz-progress-bar { 26 background-color: #0085a1; 27} 2.3 JavaScript 1document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { 2 var winHeight = window.innerHeight, 3 docHeight = document.documentElement.scrollHeight, 4 progressBar = document.querySelector(\u0026#39;#content_progress\u0026#39;); 5 progressBar.max = docHeight - winHeight; 6 progressBar.value = window.scrollY; 7 8 document.addEventListener(\u0026#39;scroll\u0026#39;, function () { 9 progressBar.max = document.documentElement.scrollHeight - window.innerHeight; 10 progressBar.value = window.scrollY; 11 }); 12}); 参考资料：\nhttps://cloud.tencent.com/developer/article/1197346 ","date":"2024-04-02T20:44:26+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/","section":"post","tags":["hugo"],"title":"Hugo：阅读进度条"},{"categories":["Tech"],"contents":"1 显示效果 现在可以按照最后更新时间进行排序了\n2 修改代码 在 layouts\\partials\\portfolio.html 中，将以下一行代码替换成后面三行。\n原代码：\n1\u0026lt;!-- {{ $paginator := .Paginate (where (where .Site.Pages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;) \u0026#34;IsPage\u0026#34; true) }} --\u0026gt; 替换成：\n1{{ $sortedPages := (where (where .Site.Pages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;) \u0026#34;IsPage\u0026#34; true) }} 2{{ $sortedPages := $sortedPages.ByLastmod.Reverse }} 3{{ $paginator := .Paginate $sortedPages }} 先找出类型为post的文章，对其按照 lastmod 的reverse进行排序，然后再为排序的页面列表创建分页器。\n","date":"2024-04-01T15:28:12+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%B0%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA/","section":"post","tags":["hugo","lastmod"],"title":"Hugo：将首页文章按照最后修改时间显示"},{"categories":["Tech"],"contents":" 此文章用于长期更新hugo学习的内容\n1\t模板 1├── layouts 2└── themes 3 └── mytheme 4 └── layouts 5 ├── 404.html // 404页面模板 6 ├── _default 7 │ ├── baseof.html // 默认的基础模板页， 使用的方式是\u0026#39;拼接\u0026#39;， 而不是\u0026#39;继承\u0026#39;. 8 │ ├── list.html // 列表模板 9 │ └── single.html // 单页模板 10 ├── index.html // 首页模板 11 └── partials // 局部模板， 通过partial引入 12 ├── footer.html 13 ├── header.html 14 └── head.html 2 文章和页面的对应关系. 1└── content 2 ├── _index.md // [home] \u0026lt;- https://example.com/** 3 ├── about.md // [page] \u0026lt;- https://example.com/about/ 4 ├── posts 5 | ├── _index.md // [section] \u0026lt;- https://example.com/posts/** 6 | ├── firstpost.md // [page] \u0026lt;- https://example.com/posts/firstpost/ 7 | ├── happy 8 | | ├── _index.md // [section] \u0026lt;- https://example.com/posts/happy/** 9 | | └── ness.md // [page] \u0026lt;- https://example.com/posts/happy/ness/ 10 | └── secondpost.md // [page] \u0026lt;- https://example.com/posts/secondpost/ 11 └── quote 12 ├── _index.md // [section] \u0026lt;- https://example.com/quote/** 13 ├── first.md // [page] \u0026lt;- https://example.com/quote/first/ 14 └── second.md // [page] \u0026lt;- https://example.com/quote/second/ 15 16// hugo默认生成的页面， 没有对应的markdown文章 17分类列表页面 // [taxonomyTerm] \u0026lt;- https://example.com/categories/** 18某个分类下的所有文章的列表 // [taxonomy] \u0026lt;- https://example.com/categories/one-category ** 19标签列表页面 // [taxonomyTerm] \u0026lt;- https://example.com/tags/** 20某个标签下的所有文章的列表 // [taxonomy] \u0026lt;- https://example.com/tags/one-tag ** 3 语法 hugo使用的是go语言自带的模板引擎， 模板的标签为{{}}， {{}}中包含的内容叫’动作’(action).\n3.1 动作–action {{ }} 中包含的内容叫“动作” (action)\n动作分为两种类型\n数据求值 控制结构 求值的结果会直接输出到模板中， 控制结构主要包含条件， 循环， 函数调用等.\n3.2 点. 1{{.}} 2点`.`代表传递给模板的数据， 表示当前模板的上下文， 他可以是go语言中的任何类型， 如: 字符串， 数组， 结构体等. 3.3 空格处理 1// 清除 pipeline 前后的空格 2{{- pipeline -}} 3 4// 清除 pipeline 前面的空格 5{{- pipeline }} 6 7// 清除 pipeline 后面的空格 8{{ pipeline -}} 3.4 变量赋值 1{{$变量名 := \u0026#34;值\u0026#34;}} 给局部变量赋值使用 :=， 这是golang的语法\n3.5 条件判断 1{{if pipeline}} T1 {{end}} 2如果pipeline有值，则输出T1. 3下面这些情况pipeline的值为空： false， 0， 值为nil的指针或接口， 长度为0的数组， 切片， map和字符串 4 5{{if pipeline}} T1 {{else}} T0 {{end}} 6如果有值则输出T1， 否则输出T0 7 8{{if pipeline}} T1 {{else if pipeline}} T0 {{end}} 3.6 循环 1{{range pipeline}} T1 {{end}} 2pipeline的值必须是数组， 切片， map， channel. 3如果pipeline的长度为0则不会输出任何结果. 否则设置点`.`为数组， 切片， map的遍历值， 输出T1. 4 模板的嵌套 在编写模板的时候， 常常将公用的部分单独做成一个模板， 如每一个页面都有导航栏， 页首， 页脚等。然后在需要的地方导入这些模板。\n一般会先编写一个基础模板， 然后在基础模板中引入子模板，\rhugo默认的基础模板页是_default/baseof.html。\r4.1 define 1{{define \u0026#34;name\u0026#34;}} T1 {{end}} 2定义一个特定名称的模板 4.2 template 1{{template \u0026#34;name\u0026#34;}} 2引入指定名称的模板, 不传入任何数据. 3 4{{template \u0026#34;name\u0026#34; pipeline}} 5引入指定名称的模板, 设置模板上下文点`.`的值为pipeline的值 4.3 block 1{{block \u0026#34;name\u0026#34; pipeline}} T1 {{end}} 2定义特定名称的模板, 并在当前位置引入该名称的模板, 模板的上下文点`.`的值为pipeline的值, 3如果该名称的模板未实现(不存在), 则输出T1 4就相当于在基础模板页中定义了一个子模板占位符. 5 模板嵌套规则 hugo中引入模板改用partial, template只用来引入内部模板. partial通过路径的方式引入模板, 被引入的子模板不在需要定义模板名.\n如果模板页面通过define定义了模板名称, 则该子模板会输出到基础模板页baseof.html中block定义的对应名称的位置.\n5.1 partial partial引入模板时的查找路径只会在下面两个地方\n1{{ partial \u0026#34;\u0026lt;PATH\u0026gt;/\u0026lt;PARTIAL\u0026gt;.html\u0026#34; . }} // 语法 2layouts/partials/*\u0026lt;PARTIALNAME\u0026gt;.html 3themes/\u0026lt;THEME\u0026gt;/layouts/partials/*\u0026lt;PARTIALNAME\u0026gt;.html 5.2 baseof.html baseof.html为hugo的默认基础模板页, 主要用于block语法. baseof.html存放在以下两个位置\n1layouts/_default/baseof.html 2themes/\u0026lt;THEME\u0026gt;/layouts/_default/baseof.html hugo先找到需要解析的模板, 如果模板中有{{define \u0026quot;name\u0026quot;}} T1 {{end}}, 则再去加载baseof.html基础模板, 并对比baseof.html中的{{block \u0026quot;name\u0026quot; pipeline}} T1 {{end}}, 如果找到相同的名称则在block处输出define中的T1, 如果没有找到相同的名称, 则在block处输出block中的T1\n参考资料\nHugo的工作原理 ","date":"2024-04-01T09:45:54+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%AD%A6%E4%B9%A0/","section":"post","tags":["hugo"],"title":"Hugo学习笔记（长期更新）"},{"categories":["Tech"],"contents":"想要在网站上做几个新页面\n","date":"2024-04-01T08:40:15+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2/","section":"post","tags":["hugo","增加新页面"],"title":"Hugo：增加新页面"},{"categories":["Tech"],"contents":"1 显示效果 可以看到在右上角有一个搜索图标，原本是这个主题带的，原本是点击以后会进入一个新的 search页面进行搜索，但是我用的时候发现这个功能有问题，点击进去以后什么都没有出现，加上又会跳转到新页面，遂放弃，根据我的需求进行改进。\n2 改进方向 总结起来我有几个想要的效果，便朝着这几个方向去改：\n在同一个页面进行搜索，省去跳转的麻烦 搜索框和结果居中固定显示，并且有滚轮 为了可以和背景区分开，又不至于太僵硬，做成了毛玻璃效果 同步适应手机端的摆放位置优化 其他一些美化 那么就朝着这个方向开始做起来吧（并没有，其实都是做好以后再总结的😑\n3 解决方案 2.1 添加搜索 在 layouts\\partials\\nav.html 中插入如下代码，在你想添加搜索的地方\n1\u0026lt;li\u0026gt; 2 \u0026lt;a id=\u0026#34;search-btn\u0026#34; href=\u0026#34;javascript:void(0);\u0026#34;\u0026gt; 3 \u0026lt;i class=\u0026#34;fa fa-search\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 4 \u0026lt;/a\u0026gt; 5\u0026lt;/li\u0026gt; 6\u0026lt;script src=\u0026#34;/js/fuse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 7\u0026lt;script src=\u0026#34;/js/fastsearch.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 8\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;/css/custom.css\u0026#34;\u0026gt; fuse.min.js 需要在github上下载一下。\n2.2 添加 index.json 然后，添加 layouts\\_default\\index.json 文件：\n1{{- $.Scratch.Add \u0026#34;index\u0026#34; slice -}} 2{{- range .Site.RegularPages -}} 3 {{- $.Scratch.Add \u0026#34;index\u0026#34; (dict \u0026#34;title\u0026#34; .Title \u0026#34;tags\u0026#34; .Params.tags \u0026#34;categories\u0026#34; .Params.categories \u0026#34;contents\u0026#34; .Plain \u0026#34;permalink\u0026#34; .Permalink \u0026#34;date\u0026#34; .Date \u0026#34;section\u0026#34; .Section) -}} 4{{- end -}} 5{{- $.Scratch.Get \u0026#34;index\u0026#34; | jsonify -}} 2.3 添加 css 文件 在 css\\custom.css 中添加如下代码，\rcss和js文件都需要进行引用\r1#fastSearch { 2 visibility: hidden; 3 position: absolute; 4 top: 200%; 5 left: 50%; 6 transform: translate(-50%, -50%); 7 display: inline-block; 8 width: 600px; 9 margin: 0 10px 0 0; 10 padding: 0; 11 12 } 13 14 15#fastSearch input { 16 /* padding: 4px; */ 17 width: 100%; 18 height: 100%; 19 font-size: 1em; 20 color: #000000; 21 font-weight: bold; 22 /* background-color: #fffffffc; */ 23 border-radius: 5px 5px 5px 5px; 24 border: none; 25 outline: none; 26 text-align: left; 27 display: inline-block; 28 padding: 10px; 29 backdrop-filter: blur(10px); /* 设置模糊效果，值越大模糊效果越明显 */ 30 background-color: rgba(242, 242, 242, 0.472); /* 设置半透明的背景色 */ 31} 32 33#searchResults li { 34 list-style: none; 35 margin-left: 0em; 36 /* background-color: #fffffffc; */ 37 /* border-bottom: 1px dotted #000; */ 38} 39 40#searchResults li .title { 41 font-size: 1em; 42 margin: 0; 43 color: #000; 44 display: inline-block; 45} 46 47 48 49#searchResults { 50 position: absolute; /* 使ul元素相对于#fastSearch进行定位 */ 51 top: 100%; /* 调整ul元素的位置 */ 52 left: 0; /* 调整ul元素的位置 */ 53 width: 100%; /* 确保ul元素填充整个#fastSearch元素 */ 54 list-style: none; /* 移除列表样式 */ 55 padding: 0; /* 移除默认的ul元素内边距 */ 56 border-radius: 5px 5px 5px 5px; 57 /* background-color: #fffffffc; */ 58 max-height: 600px; /* 根据需要调整最大高度 */ 59 overflow-y: auto; /* 当内容超过最大高度时显示滚动条 */ 60 backdrop-filter: blur(10px); /* 设置模糊效果，值越大模糊效果越明显 */ 61 background-color: rgba(242, 242, 242, 0.472); /* 设置半透明的背景色 */ 62} 63 64 65#searchResults a { 66 text-decoration: none !important; 67 padding: 10px; 68 display: inline-block; 69 width: 100%; 70 71} 72 73#searchResults a:hover, #searchResults a:focus { 74 outline: 0; 75 background-color: rgba(243, 243, 243, 0.627); 76 77 color: #0085a1; 78} 79 80#searchResults li:hover a span { 81 82 color: #0085a1; 83 } 84 85 86#search-btn { 87 /* position: absolute; 88 top: 0px; 89 right: 0px; */ 90 /* font-size: 24px; */ 91} 92 93@media (max-width:683px) { 94 #search-btn { 95 top: 0px; 96 } 97 #fastSearch{ 98 top: 100px; 99 width: 300px; 100 } 101 102} 103 104/* 对于WebKit浏览器（如Chrome和Safari） */ 105::-webkit-input-placeholder { 106 color: rgba(73, 73, 73, 0.761); 107} 108 109/* 对于Mozilla Firefox 4至18 */ 110:-moz-placeholder { 111 color: rgba(73, 73, 73, 0.761); 112 opacity: 1; /* Firefox默认给placeholder文字添加了透明度，所以需要设置opacity为1 */ 113} 114 115/* 对于Mozilla Firefox 19+ */ 116::-moz-placeholder { 117 color: rgba(73, 73, 73, 0.761); 118 opacity: 1; 119} 120 121/* 对于Internet Explorer 10-11 */ 122:-ms-input-placeholder { 123 color: rgba(73, 73, 73, 0.761); 124} 125 126/* 对于Microsoft Edge */ 127::-ms-input-placeholder { 128 color: rgba(73, 73, 73, 0.761); 129} 2.1 添加 js 文件 添加js文件 static\\js\\fastsearch.js ，并添加如下代码就大功告成了。\n1var fuse; // holds our search engine 2var fuseIndex; 3var searchVisible = false; 4var firstRun = true; // allow us to delay loading json data unless search activated 5var list = document.getElementById(\u0026#39;searchResults\u0026#39;); // targets the \u0026lt;ul\u0026gt; 6var first = list.firstChild; // first child of search list 7var last = list.lastChild; // last child of search list 8var maininput = document.getElementById(\u0026#39;searchInput\u0026#39;); // input box for search 9var resultsAvailable = false; // Did we get any search results? 10 11// ========================================== 12// The main keyboard event listener running the show 13// 14document.addEventListener(\u0026#39;keydown\u0026#39;, function(event) { 15 16 // CMD-/ to show / hide Search 17 if (event.altKey \u0026amp;\u0026amp; event.which === 191) { 18 // Load json search index if first time invoking search 19 // Means we don\u0026#39;t load json unless searches are going to happen; keep user payload small unless needed 20 doSearch(event) 21 } 22 23 // Allow ESC (27) to close search box 24 if (event.keyCode == 27) { 25 if (searchVisible) { 26 document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;hidden\u0026#34;; 27 document.activeElement.blur(); 28 searchVisible = false; 29 } 30 } 31 32 // DOWN (40) arrow 33 if (event.keyCode == 40) { 34 if (searchVisible \u0026amp;\u0026amp; resultsAvailable) { 35 console.log(\u0026#34;down\u0026#34;); 36 event.preventDefault(); // stop window from scrolling 37 if ( document.activeElement == maininput) { first.focus(); } // if the currently focused element is the main input --\u0026gt; focus the first \u0026lt;li\u0026gt; 38 else if ( document.activeElement == last ) { last.focus(); } // if we\u0026#39;re at the bottom, stay there 39 else { document.activeElement.parentElement.nextSibling.firstElementChild.focus(); } // otherwise select the next search result 40 } 41 } 42 43 // UP (38) arrow 44 if (event.keyCode == 38) { 45 if (searchVisible \u0026amp;\u0026amp; resultsAvailable) { 46 event.preventDefault(); // stop window from scrolling 47 if ( document.activeElement == maininput) { maininput.focus(); } // If we\u0026#39;re in the input box, do nothing 48 else if ( document.activeElement == first) { maininput.focus(); } // If we\u0026#39;re at the first item, go to input box 49 else { document.activeElement.parentElement.previousSibling.firstElementChild.focus(); } // Otherwise, select the search result above the current active one 50 } 51 } 52}); 53 54 55// ========================================== 56// execute search as each character is typed 57// 58document.getElementById(\u0026#34;searchInput\u0026#34;).onkeyup = function(e) { 59 executeSearch(this.value); 60} 61 62document.querySelector(\u0026#34;body\u0026#34;).onclick = function(e) { 63 if (e.target.tagName === \u0026#39;BODY\u0026#39; || e.target.tagName === \u0026#39;DIV\u0026#39;) { 64 hideSearch() 65 } 66} 67 68document.querySelector(\u0026#34;#search-btn\u0026#34;).onclick = function(e) { 69 doSearch(e) 70} 71 72function doSearch(e) { 73 e.stopPropagation(); 74 if (firstRun) { 75 loadSearch() // loads our json data and builds fuse.js search index 76 firstRun = false // let\u0026#39;s never do this again 77 } 78 // Toggle visibility of search box 79 if (!searchVisible) { 80 showSearch() // search visible 81 } 82 else { 83 hideSearch() 84 } 85} 86 87function hideSearch() { 88 document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;hidden\u0026#34; // hide search box 89 document.activeElement.blur() // remove focus from search box 90 searchVisible = false 91} 92 93function showSearch() { 94 document.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;visible\u0026#34; // show search box 95 document.getElementById(\u0026#34;searchInput\u0026#34;).focus() // put focus in input box so you can just start typing 96 searchVisible = true 97} 98 99// ========================================== 100// fetch some json without jquery 101// 102function fetchJSONFile(path, callback) { 103 var httpRequest = new XMLHttpRequest(); 104 httpRequest.onreadystatechange = function() { 105 if (httpRequest.readyState === 4) { 106 if (httpRequest.status === 200) { 107 var data = JSON.parse(httpRequest.responseText); 108 if (callback) callback(data); 109 } 110 } 111 }; 112 httpRequest.open(\u0026#39;GET\u0026#39;, path); 113 httpRequest.send(); 114} 115 116 117// ========================================== 118// load our search index, only executed once 119// on first call of search box (CMD-/) 120// 121function loadSearch() { 122 console.log(\u0026#39;loadSearch()\u0026#39;) 123 fetchJSONFile(\u0026#39;/index.json\u0026#39;, function(data){ 124 125 var options = { // fuse.js options; check fuse.js website for details 126 shouldSort: true, 127 location: 0, 128 distance: 100, 129 threshold: 0.4, 130 minMatchCharLength: 1, 131 keys: [ 132 \u0026#39;permalink\u0026#39;, 133 \u0026#39;title\u0026#39;, 134 \u0026#39;tags\u0026#39;, 135 \u0026#39;contents\u0026#39; 136 ] 137 }; 138 // Create the Fuse index 139 fuseIndex = Fuse.createIndex(options.keys, data) 140 fuse = new Fuse(data, options, fuseIndex); // build the index from the json file 141 }); 142} 143 144 145// ========================================== 146// using the index we loaded on CMD-/, run 147// a search query (for \u0026#34;term\u0026#34;) every time a letter is typed 148// in the search box 149// 150function executeSearch(term) { 151 let results = fuse.search(term); // the actual query being run using fuse.js 152 let searchitems = \u0026#39;\u0026#39;; // our results bucket 153 154 if (results.length === 0) { // no results based on what was typed into the input box 155 resultsAvailable = false; 156 searchitems = \u0026#39;\u0026#39;; 157 } else { // build our html 158 // console.log(results) 159 permalinks = []; 160 numLimit = 100; 161 for (let item in results) { // only show first 5 results 162 if (item \u0026gt; numLimit) { 163 break; 164 } 165 if (permalinks.includes(results[item].item.permalink)) { 166 continue; 167 } 168 // console.log(\u0026#39;item: %d, title: %s\u0026#39;, item, results[item].item.title) 169 searchitems = searchitems + \u0026#39;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39; + results[item].item.permalink + \u0026#39;\u0026#34; tabindex=\u0026#34;0\u0026#34;\u0026gt;\u0026#39; + \u0026#39;\u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;\u0026#39; + results[item].item.title + \u0026#39;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;; 170 permalinks.push(results[item].item.permalink); 171 } 172 resultsAvailable = true; 173 } 174 175 document.getElementById(\u0026#34;searchResults\u0026#34;).innerHTML = searchitems; 176 if (results.length \u0026gt; 0) { 177 first = list.firstChild.firstElementChild; // first result container — used for checking against keyboard up/down location 178 last = list.lastChild.firstElementChild; // last result container — used for checking against keyboard up/down location 179 } 180} ","date":"2024-03-31T20:26:11+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","section":"post","tags":["hugo","搜索","fuse"],"title":"Hugo：增加搜索功能"},{"categories":["Tech"],"contents":"1 申请域名 可以去找个免费域名网站，我用的是：\n域名申请或者购买成功了以后，我们还需要解析域名。\n2 解析域名 输入ping xxx.github.io得到 IP地址，xxx是你的Github用户名。\n找到了IP地址后，再将这个IP地址填入到之前DNS解析的Target里面，点击保存。\n","date":"2024-03-31T15:23:03+08:00","permalink":"https://huuuuuuo.github.io/post/githubpages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/","section":"post","tags":["githubpages","域名","dns"],"title":"GithubPages配置域名"},{"categories":["Tech"],"contents":" 今天想要给博客搞个域名，涉及了一大堆专业名词，在此记录一下。\n1 域名 域名就是最常见的网址，比如 www.baidu.com ，因为ip地址不好记，所以用域名来代替，我们访问域名就是访问背后的ip地址。通过 ping 就可以得到 ip 地址了。\n1C:\u0026gt;ping www.baidu.com 2 3正在 Ping www.a.shifen.com [157.148.69.80] 具有 32 字节的数据: 4来自 157.148.69.80 的回复: 字节=32 时间=22ms TTL=51 5来自 157.148.69.80 的回复: 字节=32 时间=36ms TTL=51 6来自 157.148.69.80 的回复: 字节=32 时间=23ms TTL=51 7来自 157.148.69.80 的回复: 字节=32 时间=24ms TTL=51 8 9157.148.69.80 的 Ping 统计信息: 10 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)， 11往返行程的估计时间(以毫秒为单位): 12 最短 = 22ms，最长 = 36ms，平均 = 26ms 2 A记录/AAAA记录 IPv4： 示例：www.exmaple.com. IN A 198.51.100.2 解释：【domain】 IN A 【IP地址】 IPv6： 示例：www.exmaple.com. IN AAAA 8fe0::8f61:ac8:30cd:a16e\n解释：【domain】 IN AAAA 【IP地址】\nIN的意思是「Internet」，不是IN/OUT的「IN」。\n干什么用呢？ 我们在浏览器输入域名后，需要向DNS服务器请求，找到这个域名对应的服务器IP。上面示例就是这么一条记录。\n虽然域名和IP都可以变更，但是相比来说域名变更更加简单和随意。所以当网站更换自己域名的时候，就需要修改这条记录。\n3 CNAME 示例：sub.example.com. IN CNAME hoge.example.com. 解释：【別名】 IN CNAME 【原名】 干什么用呢？ 给某一个域名起多个名字。\r也就是给你的大名取小名。\r类似于，jd.com，jd360.com，jingdong.com虽然是不同名字的域名，但是可以指向同一个原名jd.com。可以让企业的对外展示更加灵活。\n1举例： 2jd360.com IN CNAME jd.com 3jingdong.com IN CNAME jd.com 4jd.com IN A 123.123.123.123 （这条是A记录例子） 4 DNS DNS( Domain Name System) 是\r“域名系统”\r的英文缩写，它所提供的服务是用来将主机名和域名转换为IP地址的工作，\r就像电话簿一样。\r举例来说，如果你要访问域名http://qq.com，首先要通过DNS查出它的IP地址是119.147.15.13。\n打个比方，你电脑是你家，你家地址是一个IP，你要拜访百度的家，那肯定要知道百度家在哪里，你知道baidu.com，但是电脑访问的是网络地址，是数字，其它的他都不认识，百度家IP是220.181.38.148，但是你记不住，你电脑也不知道。\n那么你肯定要找备忘录啊，这时候，你电脑里有一个Hosts文件，这个文件是你的备忘录，然而你备忘录里什么都没写，这时候怎么办呢？是不是要去问？去哪问呢？打电话114去问，114就是情报局，里面什么都有，然后你问到了百度家的地址，接下来电脑就能顺着网线去找了。\n而这个114，就是DNS。\nDNS所在服务器的配置，决定了它的的快和慢，但不管怎样，它都会为你指定一个方向，就算是它找不到，他也会问他的上一级服务器要，但这就增加了查询时间，然后你就会觉得慢。\nDNS服务器是一个常年开着的服务器，做一个的指路人，是需要很大代价的，比如服务器费、电费，然后一旦是名声好的DNS，大家都会去用，所以负担也会比较大，这个时候一台DNS服务器的配置怎么样就体现出来了，因此，免费的DNS不是很多（但也不少）。\n5 DNS污染/DNS劫持 DNS污染：\nDNS能为你指明路，但也能暗中坑你一把，还能把你指到沟里去，这取决于你访问的DNS是否“善良”，有的DNS会雁过拔毛，顺走你的信息或者给你塞一张网页广告弹窗传单。\nDNS劫持：\n有的DNS会把你指向另一个地方。\nDNS污染或者DNS劫持，经常会导致上网的时候，原本没有广告弹窗的网页，蹦出各种奇奇怪怪的广告页面，甚至会跳转到其它网页里去，有时候还会有钓鱼诈骗，导致用户信息泄露，损失财产。还有就是QQ可以正常登录、游戏也可以正常玩，但是网页无论如何都打不开。（QQ自带有自己的安全DNS，所以不受影响）（纠正：QQ是内置设定了直连腾讯服务器IP，不需要通过DNS查找自己家的服务器IP地址）\n大家可以手动设置一下自己的网络DNS。电脑的，路由器的，甚至是手机的都可以设置一下。\n设置方法是打开电脑或者路由器的网络设置，然后找到DNS来填写你想要的。\n通常方便记忆，设置为主114.114.114.114，备用8.8.8.8。这俩就够用了。\n6 免费公共 DNS 服务器 由 DNSPod 提供的公共免费 DNS，后来 DNSPod 被腾讯(Tencent)收购，现在属于腾讯公司所有，稳定性和连通性也是不错的，经海外好友测试反馈，海外也可以使用。 DNSPod 除了 IPv4，现在同时支持 IPv6 DNS 和 DoT/DoH 服务。新增加了 DoT/DoH 的 IP 版。\nIPv4:\n1119.29.29.29 IPv6:\n12402:4e00:: 其他可参考：https://dns.icoa.cn/\n7 转发/重定向 实现页面的跳转有两种方式：转发和重定向。\n7.1 重定向 重定向(Redirect)就是通过各种方法**将各种网络请求重新定个方向转到其它位置**（如：网页重定向、域名的重定向、路由选择的变化也是对数据报文经由路径的一种重定向）。\n由浏览器端进行的页面跳转。\n服务器端接收到客户端的请求之后，会给客户端返回了一个临时响应头，这个临时响应头中记录了，客户端需要再次发送请求（重定向）的 URL 地址，客户端再收到了地址之后，会将请求发送到新的地址上，这就是请求重定向。\n这就好像张三（客户端）找李四（服务器端）借钱，李四没钱，于是李四就告诉张三，“我没钱，你去王五那借“，于是张三又去王五家借到了钱，这就是请求重定向。\n7.2 转发 由服务器端进行的页面跳转。在服务器内部的资源跳转方式。\n生在服务端程序内部，当服务器端收到一个客户端的请求之后，会先将请求，转发给目标地址，再将目标地址返回的结果转发给客户端。 而客户端对于这一切毫无感知的。\n这就好比，张三（客户端）找李四（服务器端）借钱，而李四没钱，于是李四又去王五那借钱，并把钱借给了张三，整个过程中张三只借了一次款，剩下的事情都是李四完成的，这就是请求转发。\n其他记录 还有其他MX记录等后续用到再更新\n参考资料：\n就是这么犀利！一文彻底理解DNS！ DNS的A、CNAME、MX、NS、TXT、SPF记录 https://www.zhihu.com/question/34826522 https://dns.icoa.cn/ https://worktile.com/kb/p/37343 ","date":"2024-03-31T14:33:56+08:00","permalink":"https://huuuuuuo.github.io/post/%E5%9F%9F%E5%90%8Da%E8%AE%B0%E5%BD%95cname%E7%AD%89%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88/","section":"post","tags":["域名","A记录","CNAME","DNS"],"title":"域名、A记录、CNAME等都是什么"},{"categories":["Tech"],"contents":"偶然看见了一位大佬的博客 给 Hugo 博客添加随机文章入口 ，发现了他做了这个功能，感觉可以搞一下，于是借鉴了她的代码，感谢。\n1 显示效果 在博客的右上角添加了一个叫 STROLL 的随机访问入口，点击后即可随机浏览一篇文章。\n2 解决方案 新增 layouts\\partials\\random.html ，并且在其中添加代码：\n1\u0026lt;script\u0026gt; 2 function goToRandomPost() { 3 const pages = [ 4 {{ range ((where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;)) }} 5 \u0026#34;{{ .RelPermalink }}?utm_source=random\u0026#34;, 6 {{ end -}} 7 ]; 8 const rand = Math.floor(Math.random() * pages.length); 9 window.location.href = pages[rand]; 10 } 11\u0026lt;/script\u0026gt; 然后再导航栏的html中添加一个入口，在 layouts\\partials\\nav.html 中添加：\n1\u0026lt;li\u0026gt; 2 {{ partial \u0026#34;random\u0026#34; . }} 3 \u0026lt;a class=\u0026#34;random\u0026#34; onclick=\u0026#39;goToRandomPost()\u0026#39;\u0026gt;STROLL\u0026lt;/a\u0026gt; 4\u0026lt;/li\u0026gt; 这样就可以完成这个随机访问的功能了~\n","date":"2024-03-30T20:26:44+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9A%8F%E6%9C%BA%E6%B5%8F%E8%A7%88%E6%96%87%E7%AB%A0%E5%8A%9F%E8%83%BD/","section":"post","tags":["hugo","随机浏览"],"title":"Hugo：添加随机浏览文章功能"},{"categories":["Tech"],"contents":"首先感谢 眠于水月间 大佬，文章主要收集于他的文章，[Hugo | 在 Stack 主题上可行的短代码们]\n本文旨在收集一些有趣的短代码，因此主要是呈现使用方式，以便快速使用\nTip\n实际使用需要去掉前括号的空格，以下所有样式皆如此\n1 评分 1{ {\u0026lt; rating 10 7 \u0026gt;}} //总星数 实际星数；不可以打半星；实际使用需要去掉前括号的空格 显示效果如下：\n2 卡片 1{ {\u0026lt; card \u0026gt;}} 2可以在这里插入链接假装是卡片式链接。 3{ {\u0026lt; /card \u0026gt;}} 可以在这里插入链接\n假装是卡片式链接。\n3 notice 1{ {\u0026lt; notice tip \u0026gt;}} 2实际使用需要去掉前括号的空格，以下所有样式皆如此 3 4![image-20240330163521774](/img/image-20240330163521774.png) 5 6{ {\u0026lt; /notice \u0026gt;}} Warning\n实际使用需要去掉前括号的空格，以下所有样式皆如此\n4 对话 1{ {\u0026lt; message from=\u0026#34;self\u0026#34; accountID=\u0026#34;twitter/昵称\u0026#34; images=\u0026#34;图片链接\u0026#34; timestamp=\u0026#34;自定义时间\u0026#34; name=\u0026#34;name\u0026#34; \u0026gt;}} 这里是自定义的信息内容。 { {\u0026lt; /message \u0026gt;}} 2 3{ {\u0026lt; message accountID=\u0026#34;twitter/昵称\u0026#34; images=\u0026#34;图片链接\u0026#34; timestamp=\u0026#34;自定义时间\u0026#34; name=\u0026#34;name\u0026#34; \u0026gt;}} 雷军 3-30 17:06\r澎湃OS再改改 金凡 3-30 17:07\r好的！ 5 时间轴 1{ {\u0026lt; timeline date=\u0026#34;2024\u0026#34; title=\u0026#34;哈哈哈\u0026#34; description=\u0026#34;啊呀\u0026#34; tags=\u0026#34;嘻嘻\u0026#34; \u0026gt;}} 2 3{ {\u0026lt; timeline date=\u0026#34;2023\u0026#34; title=\u0026#34;哈哈哈\u0026#34; description=\u0026#34;啊呀\u0026#34; tags=\u0026#34;嘻嘻\u0026#34; \u0026gt;}} 4 5{ {\u0026lt; timeline date=\u0026#34;2022\u0026#34; title=\u0026#34;哈哈哈\u0026#34; description=\u0026#34;啊呀\u0026#34; tags=\u0026#34;嘻嘻\u0026#34; \u0026gt;}} 2024\r嘻嘻\r哈哈哈\r啊呀\r2023\r嘻嘻\r哈哈哈\r啊呀\r2022\r嘻嘻\r哈哈哈\r啊呀\r6 图片轮播 1{ {\u0026lt; imgloop \u0026#34;1.jpg,2.jpg,3.jpg\u0026#34; \u0026gt;}} //需要使用url 8 PDF、PPT、网页 1{ {\u0026lt; pdf src=\u0026#34;这里放pdf链接，本地文件当然也可以！跟md文件放在一个文件夹里就行。\u0026#34; \u0026gt;}} 这里其实放什么都可以，只要是个链接就能够进行浏览\n比如，一个网页：\n9 网易云音乐 一首歌：\n1{ {\u0026lt; netease 2086327879 0 \u0026gt;}} //歌曲的id;是否自动播放(1为自动播放，0为手动播放) 一个歌单：\n1{ {\u0026lt; netease-list 154720941 0 \u0026gt;}} //歌曲的id;是否自动播放(1为自动播放，0为手动播放) 10 bilibili 1{ {\u0026lt; bilibili BV1oT4y1671T\u0026gt;}} 11 引用 NeoDB 条目 1{ {\u0026lt; neodb \u0026#34;https://neodb.social/book/1jQVzdSlbXWPMetFBuqtPJ\u0026#34; \u0026gt;}} 有点问题\n","date":"2024-03-30T15:53:28+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%AD%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/","section":"post","tags":["hugo","shortcodes","短代码"],"title":"Hugo：一些有趣的短代码收集"},{"categories":["Tech"],"contents":"1 显示效果 第一种，正经标记：\n对文字进行标记\r第二种，将文字放在代码里，利用代码的颜色来进行标记：\n对文字进行标记\n2 解决方案 首先，利用短代码，添加 ./layouts/shortcodes/mark.html 文件，并添加如下代码：\n1\u0026lt;mark\u0026gt;{{ .Get \u0026#34;text\u0026#34; }}\u0026lt;/mark\u0026gt; 其次，在 themes\\hugo-theme-cleanwhite\\static\\css\\bootstrap.min.css 中可以随意修改喜欢的标记颜色：\n1.mark,mark{padding:.2em;background-color:#ffee33a6;border-radius:10px} 也可以新建一个 custom.css ：\n1mark{ 2 background: hsla(199, 64%, 63%, 0.696); 3} 然后在 mark.html 中引用就行了：\n1\u0026lt;head\u0026gt; 2 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;/css/custom.css\u0026#34;\u0026gt; 3\u0026lt;/head\u0026gt; 这样就可以了，在用的时候，添加短代码即可：\n1{ {\u0026lt; mark text=\u0026#34;哈哈哈哈\u0026#34; \u0026gt;}} //实际使用时去掉前括号的空格 ","date":"2024-03-30T13:32:11+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%96%87%E5%AD%97%E6%A0%87%E8%AE%B0/","section":"post","tags":["hugo","mark","标记"],"title":"Hugo：文字标记"},{"categories":["Tech"],"contents":"1 显示效果 目前的显示效果如下，每篇文章可以正常显示最后修改时间。\n但是之前，\r这两个地方都是显示同一个时间，那就是最近一次 git 提交时间的8小时之前。\r一开始以为是主题修改了，导致时间会改变，尝试了不修改主题内的东西，还是一样的结果。\n在 config.toml 中也都是设置正确的：\n1[frontmatter] 2 lastmod = [\u0026#39;lastmod\u0026#39;,\u0026#39;:git\u0026#39;, \u0026#39;:fileModTime\u0026#39;, \u0026#39;date\u0026#39;, \u0026#39;publishDate\u0026#39;] 问题是，在本地进行 hugo serve 的时候，本地的效果是正确的。那么我就开始考虑是发布的时候，github acition 的 workflow 出现问题了。\n1.1 排查 timezone 在 .github\\workflows\\deploy.yml 中添加如下代码：\n1- name: Set timezone 2 run: echo \u0026#34;TZ=Asia/Shanghai\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV 发现发布以后，时间变成发布的时间了，但是每篇文章还是一致的，所以不是发布时间的问题。如果要以 git 发布时间来作为最后修改时间，可以改一下这一项。\n1.2 排查 workflow 在进行 workflow 排查的时候，想起来对于 workflow 来说，有一项是在服务端进行如下操作的：\n1- name: Build Web 2 run: hugo 在服务端进行 hugo 构建的话，就有可能会携带的 lastmod 信息被重建，从而导致时间不准，遂进行改进。\n2 解决方案 2.1 修改workflows 将.github\\workflows\\deploy.yml 中的上述代码注释掉，也就是：\n1# - name: Build Web 2# run: hugo 2.2 推送public 这时候，我们的思路是：在本地进行 hugo 的构建，然后将 public\\推送到GitHub Pages，从而避开在服务端进行 hugo 构建的操作。于是就有了接下来的操作。\n原先，在 themes\\hugo-theme-cleanwhite\\.gitignore中 忽略了 public\\的推送，这时候将它注释掉：\n1# public/ 然后，如果在 git 推送的时候没有进行 hugo 构建的话，那么得在流程上加上 hugo构建，也就是：\n1hugo 2git add . 3git commit -m \u0026#34;update\u0026#34; 4git push origin master 至此，以及可以通过本地构建，修复这个最后修改时间不一致的问题了。\n3 后续思考 其实这个问题并没有根本上解决，理论上是可以在服务端进行hugo 构建的，后续可以继续排查，可能是还有什么bug没有找到。\n","date":"2024-03-30T11:59:46+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%90%8E%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","section":"post","tags":["hugo","lastmod"],"title":"Hugo：文章发布后最后修改时间不一致问题"},{"categories":["Tech"],"contents":"1 代码高亮风格 代码高亮风格很多，可以参见 Chroma Style Gallery\n看起来都不错，可以考虑添加进 hugo\n2 遇到问题 之前我已经在 config.toml 中已经添加如下配置：\n1[markup] 2 [markup.highlight] 3 codeFences = true 4 guessSyntax = true 5 hl_Lines = \u0026#34;\u0026#34; 6 lineNoStart = 1 7 lineNos = true 8 font_size = 19 9 lineNumbersInTable = false 10 noClasses = true 11 tabWidth = 4 12 style = \u0026#34;dracula\u0026#34; 启动的风格是 dracula，也就是这样：\n在网站上显示的代码块是这样的：\n可以看出来，似乎只改了背景颜色，而代码那种五颜六色的样子并没有实现，之前一直尝试解决，却没有找到缘由，今天偶然间发现了，是不是没有将代码块所使用的代码语言进行标记，于是在进行标记了一下之后就出现了如下：\n1import os 2import shutil 3import codecs 4 5# 定义源路径和目标路径 6source_path = \u0026#34;content/post/postimg\u0026#34; 7destination_path = \u0026#34;static/img\u0026#34; 8 9# 复制文件，如果目标路径已存在文件则不覆盖 10for filename in os.listdir(source_path): 11 source_file = os.path.join(source_path, filename) 12 destination_file = os.path.join(destination_path, filename) 13 if not os.path.exists(destination_file): 14 shutil.copy2(source_file, destination_file) 15 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 16 else: 17 print(f\u0026#34;pass\u0026#34;) 1\u0026lt;template\u0026gt; 2 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; 3 \u0026lt;img src=\u0026#34;./assets/logo.png\u0026#34;\u0026gt; 4 \u0026lt;router-view/\u0026gt; 5 \u0026lt;/div\u0026gt; 6\u0026lt;/template\u0026gt; 1public class HelloJava { 2 public static void main(String[] args) { 3 System.out.println(\u0026#34;哈哈哈\u0026#34;); 4 } 5} 1.highlight pre { 2 padding-right: 75px; 3 /* background-color:#f8f8f8 !important; */ 4} 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,initial-scale=1.0\u0026#34;\u0026gt; 6 \u0026lt;title\u0026gt;vuehello\u0026lt;/title\u0026gt; 7 \u0026lt;/head\u0026gt; 8 \u0026lt;body\u0026gt; 9 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 10 \u0026lt;!-- built files will be auto injected --\u0026gt; 11 \u0026lt;/body\u0026gt; 12\u0026lt;/html\u0026gt; 2 解决方案 由此，可以得到解决方案，就是在写 markdown 的时候对代码进行标记，也就是\n1```java 2public class HelloJava { 3 public static void main(String[] args) { 4 System.out.println(\u0026#34;哈哈哈\u0026#34;); 5 } 6} 7``` 如果你使用的是 Typora ，则可以直接在右下角添加代码语言：\n这样就可以了，解决。你也可以尝试换成各种不同的代码高亮风格来进行尝试了。\n","date":"2024-03-30T02:11:00+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%A3%8E%E6%A0%BC/","section":"post","tags":["hugo","代码高亮","Chroma Style Gallery"],"title":"Hugo：代码高亮风格"},{"categories":["Tech"],"contents":"1 显示效果 鼠标未移动到上面的时候，根据发表文章的数量显示热力图：\n如果鼠标移动到上面，会显示当天发表的文章详情，并且可以点击进行跳转：\n2 解决方案 本文解决方案参考 HUGO 折腾随记之热力图 / 段落导航 、如何给 Hugo 博客添加热力图 两位大佬的文章，并进行了改造。\n改造点主要包括：\n适应性改为侧边栏热力图 只显示一个月的文章发表记录，即一个月的热力图 添加文件： themes\\hugo-theme-cleanwhite\\layouts\\partials\\heatmap.html ，然后在 themes\\hugo-theme-cleanwhite\\layouts\\partials\\sidebar.html 中添加：\n1\u0026lt;!-- heatmap --\u0026gt; 2\u0026lt;section\u0026gt; 3 \u0026lt;hr\u0026gt; 4 \u0026lt;h5\u0026gt;HEATMAP | {{ .Date.Format \u0026#34;January\u0026#34; }}\u0026lt;/h5\u0026gt; 5\t{{ partial \u0026#34;heatmap\u0026#34; . }} 6\u0026lt;/section\u0026gt; heatmap.html 的完整代码贴在下面：\n1\u0026lt;div id=\u0026#34;heatmap\u0026#34; style=\u0026#34;max-width: 290px;height: 200px;margin-bottom: 6px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 2\u0026lt;!-- \u0026lt;script src=\u0026#34;https://img.koobai.com/echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; 3\u0026lt;script src=\u0026#34;/js/echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 4\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; 5 var chartDom = document.getElementById(\u0026#39;heatmap\u0026#39;); 6 var myChart = echarts.init(chartDom); 7 window.onresize = function() { 8 myChart.resize(); 9 }; 10 var option; 11 var dataMap = new Map(); 12 {{ range ((where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;post\u0026#34;)) }} 13 var key = {{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}; 14 var value = dataMap.get(key); 15 var wordCount = {{ div .WordCount 1 }}; 16 var link = {{ .RelPermalink}}; 17 var title = {{ .Title }}; 18 19 // multiple posts in same day 20 if (value == null) { 21 dataMap.set(key, [{wordCount,link, title}]); 22 } else { 23 value.push({wordCount,link, title}); 24 } 25 {{- end -}} 26 27 var data = []; 28 for (const [key, value] of dataMap.entries()) { 29 data.push([key, value.length]); 30 } 31 32 var currentDate = new Date(); 33 var currentYear = currentDate.getFullYear(); 34 var currentMonth = currentDate.getMonth(); 35 var firstDayCurrentMonth = new Date(currentYear, currentMonth, 1); 36 var lastDayCurrentMonth = new Date(currentYear, currentMonth + 1, 0); 37 38 var startDate = echarts.format.formatTime(\u0026#39;yyyy-MM-dd\u0026#39;, firstDayCurrentMonth); 39 var endDate = echarts.format.formatTime(\u0026#39;yyyy-MM-dd\u0026#39;, lastDayCurrentMonth); 40 41 // 检测浏览器主题模式并选择颜色方案 42 var prefersDarkMode = window.matchMedia \u0026amp;\u0026amp; window.matchMedia(\u0026#39;(prefers-color-scheme: dark)\u0026#39;).matches; 43 44 // 定义明亮模式下的颜色方案 45 var lightTheme = { 46 backgroundColor: \u0026#39;#FFFFFF\u0026#39;, 47 fangkuaicolor:\u0026#39;#F1F1F1\u0026#39;, 48 gaoliangcolor: [\u0026#39;#0085A121\u0026#39;,\u0026#39;#0085A1B8\u0026#39;], 49 // gaoliangcolor: \u0026#39;#0085A1B8\u0026#39;, 50 riqiColor: \u0026#39;#999\u0026#39;, 51 textbrcolor: \u0026#39;#FFF\u0026#39;, 52 xiankuangcolor:\u0026#39;rgba(0, 0, 0, 0.0)\u0026#39;, 53 }; 54 55 // 定义暗黑模式下的颜色方案 56 var darkTheme = { 57 backgroundColor: \u0026#39;#1A1718\u0026#39;, 58 fangkuaicolor:\u0026#39;#282325\u0026#39;, 59 gaoliangcolor: [\u0026#39;#b25f2f\u0026#39;], 60 riqiColor: \u0026#39;#666\u0026#39;, 61 textbrcolor: \u0026#39;#332D2F\u0026#39;, 62 xiankuangcolor:\u0026#39;rgba(0, 0, 0, 0.0)\u0026#39;, 63 }; 64 65 // 根据浏览器主题模式选择当前主题 66 var currentTheme = prefersDarkMode ? darkTheme : lightTheme; 67 68 option = { 69 tooltip: { 70 hideDelay: 1000, 71 enterable: true, 72 backgroundColor: currentTheme.textbrcolor, 73 borderWidth: 0, // 边框宽度为0 74 formatter: function (p) { 75 const date = p.data[0]; 76 const posts = dataMap.get(date); 77 var content = `\u0026lt;span style=\u0026#34;font-size: 1.5rem;font-family: LXGW WenKai Screen;color:#ABABAB\u0026#34;\u0026gt;${date}\u0026lt;/span\u0026gt;`; 78 for (const [i, post] of posts.entries()) { 79 content += \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; 80 var link = post.link; 81 var title = post.title; 82 var wordCount = post.wordCount; 83 content += `\u0026lt;a href=\u0026#34;${link}\u0026#34; target=\u0026#34;_blank\u0026#34; style=\u0026#34;font-size: 1.6rem;font-family: LXGW WenKai Screen;\u0026#34;\u0026gt;${title} | ${wordCount}字`; 84 } 85 return content; 86 } 87 }, 88 visualMap: { 89 min: 0, 90 max: 10, 91 type: \u0026#39;piecewise\u0026#39;, 92 show: false, 93 hoverLink:true, 94 inRange: { 95 color: currentTheme.gaoliangcolor 96 // color: [\u0026#39;#7aa8744c\u0026#39; ] 97 }, 98 // itemGap: 20, 99 showLabel: false, 100 splitNumber: 4, 101 102 }, 103 calendar: { 104 left: 45, 105 top:0, 106 bottom:0, 107 right: 0, 108 cellSize: [\u0026#39;auto\u0026#39;, 13], 109 range: [startDate, endDate], 110 itemStyle: { 111 color: currentTheme.fangkuaicolor, 112 borderWidth: 5.5, 113 borderColor: currentTheme.backgroundColor, 114 }, 115 yearLabel: { show: false }, 116 monthLabel: { 117 show: false 118 // nameMap: [\u0026#39;January\u0026#39;, \u0026#39;February\u0026#39;, \u0026#39;March\u0026#39;, \u0026#39;April\u0026#39;, \u0026#39;May\u0026#39;, \u0026#39;June\u0026#39;, \u0026#39;July\u0026#39;, \u0026#39;August\u0026#39;, \u0026#39;September\u0026#39;, \u0026#39;October\u0026#39;, \u0026#39;November\u0026#39;, \u0026#39;December\u0026#39;], 119 // textStyle: { 120 // color: currentTheme.riqiColor, 121 // } 122 }, 123 dayLabel: { 124 125 firstDay: 1, 126 nameMap: [\u0026#39;Sun\u0026#39;, \u0026#39;Mon\u0026#39;, \u0026#39;Tues\u0026#39;, \u0026#39;Wed\u0026#39;, \u0026#39;Thur\u0026#39;, \u0026#39;Fri\u0026#39;, \u0026#39;Sat\u0026#39;], 127 textStyle: { 128 color: currentTheme.riqiColor, 129 fontFamily:\u0026#39;LXGW WenKai Screen\u0026#39;, 130 fontSize:14 131 } 132 }, 133 splitLine: { 134 lineStyle: { 135 color: currentTheme.xiankuangcolor, 136 } 137 } 138 }, 139 series: { 140 type: \u0026#39;heatmap\u0026#39;, 141 coordinateSystem: \u0026#39;calendar\u0026#39;, 142 data: data, 143 } 144 }; 145 146 myChart.setOption(option); 147 myChart.on(\u0026#39;click\u0026#39;, function(params) { 148 if (params.componentType === \u0026#39;series\u0026#39;) { 149 // open the first post on the day 150 const post = dataMap.get(params.data[0])[0]; 151 const link = window.location.origin + post.link; 152 window.open(link, \u0026#39;_blank\u0026#39;).focus(); 153 } 154}); 155\u0026lt;/script\u0026gt; ","date":"2024-03-30T01:43:14+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E7%83%AD%E5%8A%9B%E5%9B%BE/","section":"post","tags":["hugo","热力图"],"title":"Hugo：添加热力图"},{"categories":["Tech"],"contents":"1 显示效果 想要知乎这种图片点击放大的效果，一查才知道是灯箱。\n2 解决方案 2.1 修改 config.toml 在 config.toml文件中，添加如下代码：\n1[params] 2 fancybox = true 2.2 创建 render-image.html 在此路径下创建文件：/layouts/_default/_markup/render-image.html\n1{{if .Page.Site.Params.fancybox }} 2\u0026lt;div class=\u0026#34;post-img-view\u0026#34;\u0026gt; 3\u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;\u0026gt; 4\u0026lt;img src=\u0026#34;{{ .Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ .Text }}\u0026#34; {{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }} /\u0026gt; 5\u0026lt;/a\u0026gt; 6\u0026lt;/div\u0026gt; 7{{ end }} 2.3 添加内容 在 footer.html 中添加以下内容：\n1{{if .Page.Site.Params.fancybox }} 2\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\u0026#34; /\u0026gt; 4\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 5{{ end }} ","date":"2024-03-29T01:16:10+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7/","section":"post","tags":["hugo","图片放大","灯箱","fancybox"],"title":"Hugo：图片点击放大"},{"categories":["Tech"],"contents":"1 显示效果 2 解决方案 我正在使用的主题所提供的评论方案是：\n1 [params.giscus] 2 data_repo=\u0026#34;your GitHub repo\u0026#34; 3 data_repo_id=\u0026#34;your repo id\u0026#34; 4 data_category=\u0026#34;your category\u0026#34; 5 data_category_id=\u0026#34;your category id\u0026#34; 6 data_mapping=\u0026#34;pathname\u0026#34; 7 data_reactions_enabled=\u0026#34;1\u0026#34; 8 data_emit_metadata=\u0026#34;0\u0026#34; 9 data_theme=\u0026#34;light\u0026#34; 10 data_lang=\u0026#34;en\u0026#34; 11 crossorigin=\u0026#34;anonymous\u0026#34; 在申请giscus 的时候，显示的是：\n1\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; 2 data-repo=\u0026#34;[在此输入仓库]\u0026#34; 3 data-repo-id=\u0026#34;[在此输入仓库 ID]\u0026#34; 4 data-category=\u0026#34;[在此输入分类名]\u0026#34; 5 data-category-id=\u0026#34;[在此输入分类 ID]\u0026#34; 6 data-mapping=\u0026#34;pathname\u0026#34; 7 data-strict=\u0026#34;0\u0026#34; 8 data-reactions-enabled=\u0026#34;1\u0026#34; 9 data-emit-metadata=\u0026#34;0\u0026#34; 10 data-input-position=\u0026#34;bottom\u0026#34; 11 data-theme=\u0026#34;light\u0026#34; 12 data-lang=\u0026#34;zh-CN\u0026#34; 13 crossorigin=\u0026#34;anonymous\u0026#34; 14 async\u0026gt; 15\u0026lt;/script\u0026gt; 直接复制过来没有反应，后来才发现是参数写法不一样，把 - 改为 _ 就可以了\n","date":"2024-03-28T14:55:47+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/","section":"post","tags":["hugo","评论","giscus"],"title":"Hugo：添加评论功能"},{"categories":["Tech"],"contents":"1 目前显示效果 1git add . 2git commit -m \u0026#34;update\u0026#34; 3git push origin master 2 解决方案 2.1 内容折叠 新建 themes\\hugo-theme-cleanwhite\\layouts\\shortcodes\\details.html 文件，并添加以下代码：\n1\u0026lt;details style=\u0026#34;background-color:#ffffff;border-radius:6px;border:2px dashed rgba(187, 181, 181, 0.712);\u0026#34;\u0026gt; 2 \u0026lt;summary\u0026gt; \u0026lt;font color=#817f7f\u0026gt; \u0026gt; \u0026gt; \u0026gt; 展开 \u0026gt; \u0026gt; \u0026gt; \u0026lt;/font\u0026gt;\u0026lt;/summary\u0026gt; 3 {{ .Inner | markdownify }} 4\u0026lt;/details\u0026gt; 以上是旧代码，不知道为什么我使用的时候，没有前面的那个小箭头，不够直观。\n于是我误打误撞又改成了以下代码，只能显示详情，不能添加 summary ，summary 里面一旦有别的东西，就不会显示小箭头了：\n1\u0026lt;details style=\u0026#34;background-color:#e6e3e336;border-radius:6px;border:2px dashed rgba(187, 181, 181, 0.712);\u0026#34;\u0026gt; 2 {{ .Inner | markdownify }} 3\u0026lt;/details\u0026gt; 在 markdown 中使用时这么写：\n2.2 代码块大小限制 我是直接在主题文件中改的，在主题文件的 themes\\hugo-theme-cleanwhite\\static\\css\\hugo-theme-cleanwhite.min.css 中添加：\n1pre code{font-size:16px;display:block;width:auto;white-space:pre;word-wrap:normal} 2.post-content pre,code{font-family:LXGW WenKai Screen;font-size:18px;line-height:1.5em;max-height:50em;word-spacing:0.2em;letter-spacing:0.015em;font-weight: 600;} 其中：第一行中，\nfont-size:16px ：代码块中的字体大小\ndisplay:block ：代码块显示方式为 block ；\n第二行中， font-family:LXGW WenKai Screen ：代码块字体\nline-height:1.5em ：代码块行间距\nmax-height:50em ：代码块最大高度为50倍当前字号的大小，超过会显示滚动条，1em表示当前元素的字号大小\nword-spacing:0.2em ： 代码块中的字间距\nletter-spacing:0.015em ：代码块中的字母间距\nfont-weight: 600 ：字重，就是字的粗细程度\n显示效果如下：\n1import os 2import shutil 3import codecs 4 5# 定义源路径和目标路径 6source_path = \u0026#34;content/post/postimg\u0026#34; 7destination_path = \u0026#34;static/img\u0026#34; 8 9# 复制文件，如果目标路径已存在文件则不覆盖 10for filename in os.listdir(source_path): 11 source_file = os.path.join(source_path, filename) 12 destination_file = os.path.join(destination_path, filename) 13 if not os.path.exists(destination_file): 14 shutil.copy2(source_file, destination_file) 15 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 16 else: 17 print(f\u0026#34;pass\u0026#34;) 18print(f\u0026#34;----------------------------------\u0026#34;) 19# 遍历md文件并替换字符串 20md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 21for md_file in md_files: 22 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 23 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 24 content = file.read() 25 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 26 if content != new_content: 27 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 28 file.write(new_content) 29 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 30 else: 31 print(f\u0026#34;pass\u0026#34;) 32 33 34# 定义源路径和目标路径 35source_path = \u0026#34;content/post/postimg\u0026#34; 36destination_path = \u0026#34;static/img\u0026#34; 37 38# 复制文件，如果目标路径已存在文件则不覆盖 39for filename in os.listdir(source_path): 40 source_file = os.path.join(source_path, filename) 41 destination_file = os.path.join(destination_path, filename) 42 if not os.path.exists(destination_file): 43 shutil.copy2(source_file, destination_file) 44 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 45 else: 46 print(f\u0026#34;pass\u0026#34;) 47print(f\u0026#34;----------------------------------\u0026#34;) 48# 遍历md文件并替换字符串 49md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 50for md_file in md_files: 51 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 52 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 53 content = file.read() 54 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 55 if content != new_content: 56 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 57 file.write(new_content) 58 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 59 else: 60 print(f\u0026#34;pass\u0026#34;) 2.3 结合起来 1import os 2import shutil 3import codecs 4 5# 定义源路径和目标路径 6source_path = \u0026#34;content/post/postimg\u0026#34; 7destination_path = \u0026#34;static/img\u0026#34; 8 9# 复制文件，如果目标路径已存在文件则不覆盖 10for filename in os.listdir(source_path): 11 source_file = os.path.join(source_path, filename) 12 destination_file = os.path.join(destination_path, filename) 13 if not os.path.exists(destination_file): 14 shutil.copy2(source_file, destination_file) 15 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 16 else: 17 print(f\u0026#34;pass\u0026#34;) 18print(f\u0026#34;----------------------------------\u0026#34;) 19# 遍历md文件并替换字符串 20md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 21for md_file in md_files: 22 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 23 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 24 content = file.read() 25 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 26 if content != new_content: 27 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 28 file.write(new_content) 29 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 30 else: 31 print(f\u0026#34;pass\u0026#34;) 32 33 34# 定义源路径和目标路径 35source_path = \u0026#34;content/post/postimg\u0026#34; 36destination_path = \u0026#34;static/img\u0026#34; 37 38# 复制文件，如果目标路径已存在文件则不覆盖 39for filename in os.listdir(source_path): 40 source_file = os.path.join(source_path, filename) 41 destination_file = os.path.join(destination_path, filename) 42 if not os.path.exists(destination_file): 43 shutil.copy2(source_file, destination_file) 44 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 45 else: 46 print(f\u0026#34;pass\u0026#34;) 47print(f\u0026#34;----------------------------------\u0026#34;) 48# 遍历md文件并替换字符串 49md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 50for md_file in md_files: 51 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 52 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 53 content = file.read() 54 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 55 if content != new_content: 56 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 57 file.write(new_content) 58 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 59 else: 60 print(f\u0026#34;pass\u0026#34;) 3 改进 3.1 notice+details Note\n结合 details 可以使notice具有折叠效果，但是对于notice 的初衷来说，本就是为了提醒，就不需要折叠了，仅供以后想用的时候进行参考。\n使用时对于notice是没有变化的，依然是：\n改动方式是在 notice.html 后面进行稍微改动，添加 summary 和 details ：\n1\u0026lt;div class=\u0026#34;notice {{ $noticeType }}\u0026#34; {{ if len .Params | eq 2 }} id=\u0026#34;{{ .Get 1 }}\u0026#34; {{ end }}\u0026gt; 2\u0026lt;details\u0026gt; 3 \u0026lt;summary\u0026gt; 4 \u0026lt;p class=\u0026#34;notice-title\u0026#34;\u0026gt; 5 \u0026lt;span class=\u0026#34;icon-notice baseline\u0026#34;\u0026gt; 6 {{ printf \u0026#34;icons/%s.svg\u0026#34; $noticeType | readFile | safeHTML }} 7 \u0026lt;/span\u0026gt; 8 {{- i18n $noticeType -}} 9 \u0026lt;/p\u0026gt; 10 \u0026lt;/summary\u0026gt; 11 {{- if or $block (not $raw) }}{{ $raw }}{{ else }}\u0026lt;p\u0026gt;{{ $raw }}\u0026lt;/p\u0026gt;{{ end -}} 12\u0026lt;/details\u0026gt; 13\u0026lt;/div\u0026gt; 3.2 可添加 css 来改进动态效果 ","date":"2024-03-27T23:23:48+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/","section":"post","tags":["hugo","折叠","代码块"],"title":"Hugo：内容折叠与代码块大小限制"},{"categories":["Tech"],"contents":"显示效果 解决方案 本文使用 不蒜子 来进行网站访问量的统计\n前期也踩了几个坑，最后在官网发现了最佳解决方案，只需要将官网上的两行代码稍加改进就可以在hugo上完美使用，这是官网的使用方式：\n1\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2\u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt;本站总访问量\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/span\u0026gt; 我们在 hugo 的 themes\\hugo-theme-cleanwhite\\layouts\\partials\\footer.html 文件中的相应位置（取决于你想插入的位置），插入以下代码：\n1\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2\u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt;本站总访问量 \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 · \u0026lt;/span\u0026gt; 3\u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt;您是本站第 \u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 位访问者\u0026lt;/span\u0026gt; busuanzi_value_site_pv ：表示访问次数\nbusuanzi_value_site_uv ：表示访问者\n","date":"2024-03-27T22:40:19+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/","section":"post","tags":["hugo","访问量"],"title":"Hugo：访问量统计"},{"categories":["Tech"],"contents":"显示效果 解决方案 本博客使用的是 霞鹜文楷 ，要在网站使用此字体，可以查看 霞鹜文楷屏幕阅读版 网络字体仓库\n1、插入代码 将以下代码插入 themes\\hugo-theme-cleanwhite\\layouts\\partials\\head.html\n1\u0026lt;html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/style.css\u0026#34; /\u0026gt; 4 \u0026lt;style\u0026gt; 5 body { 6 font-family: \u0026#34;LXGW WenKai Screen\u0026#34;; 7 font-weight: normal; 8 } 9 \u0026lt;/style\u0026gt; 10\u0026lt;/head\u0026gt; 11\u0026lt;body\u0026gt; 12 13\u0026lt;/body\u0026gt; 14\u0026lt;/html\u0026gt; 2、修改 font-family 我是直接在主题上进行改动，打开主题文件的css文件：themes\\hugo-theme-cleanwhite\\static\\css\\hugo-theme-cleanwhite.min.css\n将 font-family 后的字体全部改为 LXGW WenKai Screen\n完成。\n","date":"2024-03-27T22:27:26+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/","section":"post","tags":["hugo","自定义","字体"],"title":"Hugo：自定义字体"},{"categories":["Tech"],"contents":"文章参考自：https://github.com/sengmitnick/hugo-theme-hello-friend-ng/commit/9e6ba0cc1940ffa200fdf21787e7e808d2f126d0\n显示效果 右下角显示回到顶部按钮\n解决方案 添加代码： layouts/partials/backtop.html 代码如下：\n1\u0026lt;style\u0026gt; 2 /* add BackTop */ 3 #backtop { 4 color: #c2c0c0; 5 position: fixed; 6 right: 25px; 7 bottom: 25px; 8 width: 35px; 9 height: 35px; 10 z-index: 999998; 11 12 /* cursor: pointer; */ 13 } 14\u0026lt;/style\u0026gt; 15\u0026lt;div id=\u0026#34;backtop\u0026#34;\u0026gt; 16 \u0026lt;svg aria-hidden=\u0026#34;true\u0026#34; focusable=\u0026#34;false\u0026#34; data-prefix=\u0026#34;fas\u0026#34; data-icon=\u0026#34;chevron-circle-up\u0026#34; class=\u0026#34;svg-inline--fa fa-chevron-circle-up fa-w-16\u0026#34; role=\u0026#34;img\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt; 17 \u0026lt;path fill=\u0026#34;currentColor\u0026#34; d=\u0026#34;M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm231-113.9L103.5 277.6c-9.4 9.4-9.4 24.6 0 33.9l17 17c9.4 9.4 24.6 9.4 33.9 0L256 226.9l101.6 101.6c9.4 9.4 24.6 9.4 33.9 0l17-17c9.4-9.4 9.4-24.6 0-33.9L273 142.1c-9.4-9.4-24.6-9.4-34 0z\u0026#34;\u0026gt; 18 \u0026lt;/path\u0026gt; 19 \u0026lt;/svg\u0026gt; 20 21\u0026lt;/div\u0026gt; 22\u0026lt;script\u0026gt; 23 var timer = null; 24 backtop.onclick = function () { 25 cancelAnimationFrame(timer); 26 //获取当前毫秒数 27 var startTime = +new Date(); 28 //获取当前页面的滚动高度 29 var b = document.body.scrollTop || document.documentElement.scrollTop; 30 var d = 500; 31 var c = b; 32 timer = requestAnimationFrame(function func() { 33 var t = d - Math.max(0, startTime - (+new Date()) + d); 34 document.documentElement.scrollTop = document.body.scrollTop = t * (-c) / d + b; 35 timer = requestAnimationFrame(func); 36 if (t == d) { 37 cancelAnimationFrame(timer); 38 } 39 }); 40 } 41 42\u0026lt;/script\u0026gt; 然后在 layouts/_default/baseof.html 里面添加\n1{{ partial \u0026#34;backtop.html\u0026#34; . }} ","date":"2024-03-27T17:15:28+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E4%B8%80%E9%94%AE%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/","section":"post","tags":["hugo"],"title":"Hugo：一键回到顶部"},{"categories":["Tech"],"contents":"文章参考自 https://thirdshire.com/hugo-stack-renovation/\n显示效果 解决方案 1\u0026lt;!-- Add blog running time --\u0026gt; 2本博客已稳定运行 3\u0026lt;span id=\u0026#34;runningdays\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 4\u0026lt;script\u0026gt; 5let s1 = \u0026#39;2024-3-18\u0026#39;; //website start date 6s1 = new Date(s1.replace(/-/g, \u0026#34;/\u0026#34;)); 7let s2 = new Date(); 8let timeDifference = s2.getTime() - s1.getTime(); 9 10let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); 11let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); 12let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60)); 13 14let result = days + \u0026#34;天\u0026#34; + hours + \u0026#34;小时\u0026#34; + minutes + \u0026#34;分钟\u0026#34;; 15document.getElementById(\u0026#39;runningdays\u0026#39;).innerHTML = result; 16\u0026lt;/script\u0026gt; 17\u0026lt;br\u0026gt; ","date":"2024-03-27T16:05:03+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","section":"post","tags":["hugo"],"title":"Hugo：博客运行时间"},{"categories":["Tech"],"contents":"文章参考自 https://thirdshire.com/hugo-stack-renovation/\n显示效果 解决方法 我是直接在主题上面改的，在主题的 layouts/partials/footer.html 里增加以下代码：\n1\u0026lt;!-- 添加在copyright之前 --\u0026gt; 2 3\u0026lt;!-- Add total page and word count time --\u0026gt; 4{{$scratch := newScratch}} 5{{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34; )}} 6\t{{$scratch.Add \u0026#34;total\u0026#34; .WordCount}} 7{{ end }} 8发表了{{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }}篇文章 · 9总计{{ div ($scratch.Get \u0026#34;total\u0026#34;) 1000.0 | lang.FormatNumber 2 }}k字 10\u0026lt;br\u0026gt; ","date":"2024-03-27T15:38:38+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/","section":"post","tags":["hugo","字数统计"],"title":"Hugo：总字数统计"},{"categories":["Tech"],"contents":"文章转载修改自：https://blog.csdn.net/wwwtotoro/article/details/91042307\n在根目录中新建.gitignore文件，设置如下：\n1public/ 若没有生效，是因为gitignore只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改 .gitignore 是无效的。 解决方法是先把本地缓存删除，然后再提交。\n1git rm -r --cached . 2git add . 3git commit -m \u0026#34;update .gitignore\u0026#34; 4git push -u origin master 结果显示，git远程仓库内删除了 public 目录\n","date":"2024-03-27T11:44:19+08:00","permalink":"https://huuuuuuo.github.io/post/git%E4%B9%8B.gitignore%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","section":"post","tags":["git","gitignore"],"title":"Git：.gitignore无效解决方法"},{"categories":["Tech"],"contents":"1、背景 有一个程序，使用asp、mysql、python实现，想要实现在另一台windows环境部署，需要将部署方法最简化。\n目前考虑的方案是，mysql 改用 access，python\n","date":"2024-03-27T10:16:07+08:00","permalink":"https://huuuuuuo.github.io/post/python%E6%97%A0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","section":"post","tags":["python","windows","access"],"title":"Python无环境部署"},{"categories":["Tech"],"contents":"使用hugo搭建博客的时候，md文件的图片存储路径有问题，对其进行改进\n1、typora配置 图像存储路径改为如图，其中是以相对路径 ./ 开头\n2、用py自动化流程 在hugo-root 路径下，新建 img_move.py 文件，并将其放进 Hugo日常更新流程\npy代码如下：\n1import os 2import shutil 3import codecs 4 5# 定义源路径和目标路径 6source_path = \u0026#34;content/post/postimg\u0026#34; 7destination_path = \u0026#34;static/img\u0026#34; 8 9# 复制文件，如果目标路径已存在文件则不覆盖 10for filename in os.listdir(source_path): 11 source_file = os.path.join(source_path, filename) 12 destination_file = os.path.join(destination_path, filename) 13 if not os.path.exists(destination_file): 14 shutil.copy2(source_file, destination_file) 15 print(f\u0026#34;文件 {source_file} 复制成功！\u0026#34;) 16 else: 17 print(f\u0026#34;pass\u0026#34;) 18print(f\u0026#34;----------------------------------\u0026#34;) 19# 遍历md文件并替换字符串 20md_files = [f for f in os.listdir(\u0026#34;content/post\u0026#34;) if f.endswith(\u0026#34;.md\u0026#34;)] 21for md_file in md_files: 22 md_file_path = os.path.join(\u0026#34;content/post\u0026#34;, md_file) 23 with codecs.open(md_file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 24 content = file.read() 25 new_content = content.replace(\u0026#39;/img/\u0026#39;, \u0026#39;/img/\u0026#39;) 26 if content != new_content: 27 with codecs.open(md_file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;) as file: 28 file.write(new_content) 29 print(f\u0026#34;文件 {md_file_path} 替换成功！\u0026#34;) 30 else: 31 print(f\u0026#34;pass\u0026#34;) ","date":"2024-03-21T18:55:26+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96/","section":"post","tags":["hugo","优化","脚本"],"title":"Hugo：图片存储路径优化"},{"categories":["Tech"],"contents":"本文转载与修改自：Hugo插件之代码块拷贝插件\n添加按钮-css 我们通过检查博客内容页面发现，hugo生成的每个代码块格式如下：\n没有语法突出显示的代码块具有相同的结构，但周围没有 \u0026lt;div class=highlight\u0026gt;。为了考虑到这两种情况，我选择了作为 \u0026lt;pre\u0026gt; 元素下面的 \u0026lt;code\u0026gt; 子元素。\ncopy-to-clipboard.css\n1.highlight { 2 position: relative; 3} 4 5.highlight pre { 6 padding-right: 75px; 7 /* background-color:#f8f8f8 !important; */ 8} 9 10.highlight-copy-btn { 11 position: absolute; 12 top: 7px; 13 right: 7px; 14 border: 0; 15 border-radius: 4px; 16 padding: 1px; 17 font-size: 0.8em; 18 line-height: 1.5; 19 color: #fff; 20 background-color: #777; 21 min-width: 50px; 22 text-align: center; 23} 24 25.highlight-copy-btn:hover { 26 background-color: #666; 27} 与剪切板交互-js 按钮有了，接下来就是怎么使用JavaScript拷贝代码到剪切板，废话少说，直接上代码：\ncopy-to-clipboard.js\n1(function() { 2 \u0026#39;use strict\u0026#39;; 3 4 if(!document.queryCommandSupported(\u0026#39;copy\u0026#39;)) { 5 return; 6 } 7 8 function flashCopyMessage(el, msg) { 9 el.textContent = msg; 10 setTimeout(function() { 11 el.textContent = \u0026#34;Copy\u0026#34;; 12 }, 1000); 13 } 14 15 function selectText(node) { 16 var selection = window.getSelection(); 17 var range = document.createRange(); 18 range.selectNodeContents(node); 19 selection.removeAllRanges(); 20 selection.addRange(range); 21 return selection; 22 } 23 24 function addCopyButton(containerEl) { 25 var copyBtn = document.createElement(\u0026#34;button\u0026#34;); 26 copyBtn.className = \u0026#34;highlight-copy-btn\u0026#34;; 27 copyBtn.textContent = \u0026#34;Copy\u0026#34;; 28 29 var codeEl = containerEl.firstElementChild; 30 copyBtn.addEventListener(\u0026#39;click\u0026#39;, function() { 31 try { 32 var selection = selectText(codeEl); 33 document.execCommand(\u0026#39;copy\u0026#39;); 34 selection.removeAllRanges(); 35 36 flashCopyMessage(copyBtn, \u0026#39;Copied!\u0026#39;) 37 } catch(e) { 38 console \u0026amp;\u0026amp; console.log(e); 39 flashCopyMessage(copyBtn, \u0026#39;Failed :\\\u0026#39;(\u0026#39;) 40 } 41 }); 42 43 containerEl.appendChild(copyBtn); 44 } 45 46 // Add copy button to code blocks 47 var highlightBlocks = document.getElementsByClassName(\u0026#39;highlight\u0026#39;); 48 Array.prototype.forEach.call(highlightBlocks, addCopyButton); 49})(); 修改主题 将 copy-to-clipboard.css 和 copy-to-clipboard.js 分别放到 static/css 和 static/js 目录下\n然后在页面引用这两个文件\n1.修改 config.toml 添加自定义css\n1custom_css = [\u0026#34;/css/copy-to-clipboard.css\u0026#34;] 2.修改主题文件下的 layouts/partials/footer.html\n在结尾加上下面这一句，之前测试在 config.toml 下面添加，不生效\n1\u0026lt;script src=\u0026#34;/js/copy-to-clipboard.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ","date":"2024-03-21T13:12:48+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/","section":"post","tags":["hugo","copy","代码块"],"title":"Hugo：代码块拷贝"},{"categories":["Tech"],"contents":"git连接时遇到问题 1ssh -T git@github.com 2Connection reset by 140.82.113.3 port 22 解决方案 在所生成ssh秘钥文件夹下（~/.ssh/）使用文本文档新建 config文件（无后缀）。\n修改代码块中user的email为自己的email。\n1Host github.com 2User yourmail@xx.com 3Hostname ssh.github.com 4PreferredAuthentications publickey 5IdentityFile ~/.ssh/id_rsa 6Port 443 结果：连接成功，问题解决。\n1ssh -T git@github.com 2Hi Syouth7! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 后续：又多次遇到这种情况，最后发现，其实只是github连接问题，连接不够顺畅，作罢\n","date":"2024-03-21T11:36:42+08:00","permalink":"https://huuuuuuo.github.io/post/%E8%BF%9E%E6%8E%A5github%E6%97%B6connection-reset%E7%9A%84%E9%97%AE%E9%A2%98/","section":"post","tags":["git","reset","ssh","git bug"],"title":"连接github时connection reset的问题"},{"categories":["Tech"],"contents":"本地编辑md我用的是typora，用一些快捷键会更好用\n设置标题 ctrl + 1 ~6 标题1~6 等同于 一级标题：#+空格+标题内容 二级标题：##+空格+标题内容 最多六级标题\n正文：ctrl + 0\n选中 选中一整行：ctrl+L\n选中单词：ctrl+d\n选中相同格式的文字：ctrl+e\n搜索替换 搜索：ctrl+f\n替换：ctrl+h\n编辑格式 加粗：ctrl+b\n倾斜：ctrl+i\n下划线：ctrl+u\n代码块：ctrl+alt+f\n删除线：alt+shift+5 或 ～～内容～～\n分割线：- - - 或***\n切换编辑语法模式/预览模式：ctrl + / 引用：\u0026gt;+空格\n插入 插入链接：ctrl+k\n插入目录：[toc] + enter\n插入图片：直接拖动到指定位置即可或者ctrl+shift+i\n插入表格：ctrl + T\n插入：这个是使用的 ``\n","date":"2024-03-20T22:30:42+08:00","permalink":"https://huuuuuuo.github.io/post/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/","section":"post","tags":["typora","快捷键"],"title":"Typora快捷键"},{"categories":["Tech"],"contents":"Git是一个分布式版本控制系统，用于跟踪文件的更改，协作开发，以及管理项目的版本。\nindex：暂存区\nworkspace：工作区\nrespository：本地仓库\nremote：远程仓库\n一个完整的简单的git推送流程 1ssh -T git@github.com 2git init 1git add . 2git commit -m “update” 3git push -u origin main 以下是Git的基本操作：\n创建仓库 初始化仓库：git init 用于在当前目录下创建一个新的Git仓库。 克隆仓库：git clone \u0026lt;repository\u0026gt; 用于从远程仓库克隆一个项目到本地。 基本操作 添加文件到暂存区：git add \u0026lt;file\u0026gt; 或 git add .（添加所有文件）。 提交更改：git commit -m \u0026quot;commit message\u0026quot; 将暂存区的更改提交到本地仓库。 查看状态：git status 显示工作区和暂存区的状态。 查看差异：git diff 显示工作区与暂存区的差异。 查看提交历史：git log 显示提交历史。 分支与合并 创建分支：git branch \u0026lt;branch-name\u0026gt; 创建一个新分支。 切换分支：git checkout \u0026lt;branch-name\u0026gt; 切换到指定分支。 合并分支：git merge \u0026lt;branch-name\u0026gt; 将指定分支合并到当前分支。 远程仓库操作 添加远程仓库：git remote add \u0026lt;remote-name\u0026gt; \u0026lt;repository\u0026gt; 添加远程仓库。 推送到远程仓库：git push \u0026lt;remote-name\u0026gt; \u0026lt;branch-name\u0026gt; 将本地分支推送到远程仓库。 从远程仓库拉取：git pull \u0026lt;remote-name\u0026gt; \u0026lt;branch-name\u0026gt; 从远程仓库拉取指定分支的更改。 配置Git 配置用户信息：git config --global user.name \u0026quot;your name\u0026quot; 和 git config --global user.email \u0026quot;youremail@example.com\u0026quot; 设置全局用户名和邮箱。 配置差异分析工具：git config --global merge.tool vimdiff 设置差异分析工具。 配置彩色输出：git config --global color.ui auto 配置Git命令输出为彩色。 其他操作 删除文件：git rm \u0026lt;file\u0026gt; 从工作区和暂存区删除文件。 重命名文件：git mv \u0026lt;old-name\u0026gt; \u0026lt;new-name\u0026gt; 在工作区和暂存区中重命名文件。 查看未跟踪文件：git status --ignored 显示未跟踪的文件。 高级操作 撤销提交：git revert \u0026lt;commit\u0026gt; 撤销指定提交。 重置到指定提交：git reset --hard \u0026lt;commit\u0026gt; 将当前分支重置到指定提交。 查看差异：git diff \u0026lt;commit1\u0026gt;..\u0026lt;commit2\u0026gt; 查看两个提交之间的差异。 这些是Git的基本操作，可以帮助你更好地管理项目的版本控制。\n","date":"2024-03-20T20:30:42+08:00","permalink":"https://huuuuuuo.github.io/post/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","section":"post","tags":["git"],"title":"git基本使用"},{"categories":["Tech"],"contents":"1、新建文章 进入blog本地仓库，新疆文章，写文章并修改\n1cd F:\\vscode\\hugo-root 2hugo new post/文章名字.md 2、本地验证 1hugo serve -D --disableFastRender 2或 3hugo serve 3、更新public目录，进入public目录，提交代码 1hugo\t#注意此时不能再 hugo serve了，否则public目录某些html的连接为http://localhost:1313/... 2git add . 3git commit -m \u0026#34;update\u0026#34; 4git push origin master 5 6cd public 7git add . 8git commit -m \u0026#34;update\u0026#34; 9git push origin master 10 稍等一两分钟，即可打开网址查看，Nefelibata\n4、改进 写完一篇文章以后，进行如下操作，即可更新完成\n（1）流程化 方案一：本地流程化 a.添加 .gitignore 有一个注意事项，新建文件 .gitignore，把public填进去\n1public/ b.全流程 此处改进详情请看 Hugo：图片存储路径优化\n其中img_move.py也已经打包成 exe，所以第一步也可以使用\n1python img_move.py # 或直接 img_move.exe 1python img_move.py 2hugo 3git add . 4git commit -m \u0026#34;update\u0026#34; 5git push origin master 6 7cd public 8git add . 9git commit -m \u0026#34;update\u0026#34; 10git push origin master 11 c.一键部署 将所有步骤打包成 bat\n1run_update.bat 方案二：Github Action 自动发布 Github Action 自动发布其实就是在网页端进行流程化\n添加路径 .github/workflows/deploy.yml\n在deploy.yml 中\n1name: blog public 2on: 3 push: 4 # branches: 5 # - main 6jobs: 7 build-deploy: 8 runs-on: ubuntu-20.04 9 # runs-on: macos-latest 10 steps: 11 - name: Check out source 12 uses: actions/checkout@v2 13 14 - name: Setup hugo 15 uses: peaceiris/actions-hugo@v2 16 with: 17# hugo-version: \u0026#34;latest\u0026#34; # 可以修改为你使用的 Hugo 版本 18 hugo-version: \u0026#34;0.124.0\u0026#34; # 19 extended: true # 设置是否需要 extended 版本 20 21 - name: Build Web 22 run: hugo 23 24 - name: Publish Web 25 uses: peaceiris/actions-gh-pages@v3 26 with: 27 personal_token: ${{ secrets.PERSONAL_TOKEN }} # 另外还支持 deploy_token 和 github_token 28 external_repository: HuuuuuuO/huuuuuuo.github.io # 修改为你的 GitHub Pages 仓库 29 publish_branch: master 30 publish_dir: ./public 31# keep_files: false 32 # 如果使用自定义域名，还需要添加下面一行配置 33 # cname: www.goodfun.me 若是使用action自动发布，则发布流程为：\n1python img_move.py 2hugo 3git add . 4git commit -m \u0026#34;update\u0026#34; 5git push origin master （2）取消主题子模块 如果要自己修改主题，则需要取消主题作为子模块\n首先，将 ./themes/主题包 路径下的主题包复制到别的路径\n接着，执行以下步骤删除主题子模块\n1git rm --cached \u0026lt;子模块路径\u0026gt; 2rm -rf \u0026lt;子模块路径\u0026gt; 3git config --file=.gitmodules --remove-section submodule.\u0026lt;子模块名称\u0026gt; 4git config --remove-section submodule.\u0026lt;子模块名称\u0026gt; 5rm -rf \u0026lt;子模块路径\u0026gt;/.git 6git add \u0026lt;子模块路径\u0026gt; 7git commit -m \u0026#34;Convert submodule to regular directory\u0026#34; 8git push origin \u0026lt;分支名\u0026gt; 最后将主题包复制回 ./themes/主题包\n","date":"2024-03-20T17:30:42+08:00","permalink":"https://huuuuuuo.github.io/post/hugo%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/","section":"post","tags":["hugo","github","pages"],"title":"Hugo：日常更新流程"},{"categories":["Tech"],"contents":" 视频是关于GPT的底层原理和未来影响。将抛开技术细节，少用专业名词，在整体功能上讲解ChatGPT 的「工作原理」「制造过程」「涌现的能力」「未来的影响」以及「如何应对」：\n1、ChatGPT是如何回答问题的\n2、它是怎么被制造的，为什么它不是搜索引擎\n3、它有哪些惊人能力，为什么它不只是聊天机器人\n4、它将给社会带来什么样的冲击\n5、我们该如何维持未来的竞争力\n总结1 一、底层原理\n生成文段的原理：单字接龙与自回归生成。基于上文生成下一个单字，同时把自己新生成的单字归入上文，继续生成下一个单字。若上文对应多个单字，则基于概率分布随机抽取。 如何生成合理的回答：输入回答范例让模型学习，从多个类似范例中形成通用规律，从而面对数据库未储存的问题，能够基于通用规律回答出数据库中不存在的文本。 因此它不同于搜索引擎，搜索引擎只能呈现数据库中存在的文本。 由此导致的缺陷：混淆记忆。基于通用规律生成的文本可能并不正确。人们由于无法直接查看其依赖的数据库和其学习方式，难以对其回答进行证实证伪。 二、ChatGPT的三阶段训练\n无监督学习（开卷有益）：对模型输入海量的互联网文本，让模型自己学习、做单字接龙（GPT-3学习材料45TB，参数1750亿，变成了超大模型LLM）。 监督学习（模板规范）：输入人工写好的优质对话范例，让模型学习如何组织符合人类规范的回答。例如对不知道的问题回答“不知道”而非乱说，对错误的问题指出错误而非顺着说，对违法的问题指出违法而非直接回答。 强化学习（创意引导）：不再要求ChatGPT按对话范例回答，而是直接向它提问，让它自由回答。对回答进行人工评分，奖励有创意的回答。 当单字接龙达到超大规模，成为LLM后，出现了3个意外能力： 理解指令：因为可以把各种任务要求（归纳、拆分、仿写、润色、洗稿、比对、翻译）等都以优质对话范例的形式输入模型，ChatGPT可以理解各种指令，支持各种任务。 理解例子（语境内学习）：ChatGPT可以通过用户输入的若干例子，来明确用户想干什么，处理新的要求。这种能力如何产生目前还无定论。 思维链：若要求ChatGPT分步思考，它就可以一步步连续推理，且最终答对的可能性大幅提升。 三、ChatGPT的意义\n类似一次试点火实验，它展示了大语言模型（LLM）的可行性，使全世界愿意投入更多到LLM的开发改进中，使LLM变得更好用、更便宜，更多相关产品得以普及。\n四、LLM的应用价值\n自然语言处理技术（NLP）实现理解自然语言后，能够帮助人类处理海量语言内容，使一个普通人快捷准确地接触到各行各业的平均知识，从而提高人们【创造、继承和应用知识】的语言处理效率。\nLLM自身不能改造世界。因为其对语言的“理解”与人类不同，不认识语言符号的指代对象，只是学会了【承载知识的语言搭配模式】。所以其身份是成为人类的工具（百科全书），由人类对模型的回答进行解读和实践。 五、LLM的社会影响\n深影响行业：与【语言中的知识】密切相关的行业：学术界-创造知识（eg: 人机科研），教育界-传承知识，新闻界-传播信息。 教育界的挑战：现有的教育模式主要是“传授既有知识”，但有可能未来人们学到的所有知识LLM也都拥有。因此需要新建教育的理论框架，转向主要传授“学习能力和创造能力”，并且需要将“人的更高层次的创新”与“LLM的创新”区分开来。 网络安全的挑战：ChatGPT可能输出违法信息。如何确保提问中的商业、国家机密不被泄露。由于数据安全问题，各国、各公司可能会开发自己的LLM，但如何实现数据规模效应，实现联邦学习。 六、如何应对\n克服抵触心理。很多人会因为害怕被取代而抵触新工具，但这只会让我们更晚学会利用新工具，更晚获得新工具带来的优势。 重塑终身学习能力。应试教育使人习惯将与分数有关的学习才称为“学习”，有学校之外不愿学习的怠惰心理。但GPT-4后还会有新工具出现，只能靠自己学会终身学习。 国家重视。LLM可能是一项升级人类学习系统的技术，带来新一轮工业革命，国家不能错过。 总结2 写在前面：\n视频其中提到自然语言模型与现实人类社会的问题进行的个人总结\n（个人的思考能力固然是有限的，欢迎大家在评论区探讨）\n**标题：【**Ep.1 万字科普ChatGPT-4为何会颠覆人类社会】\n作者原意主题是「为什么所有人都应关注ChatGPT」\n作者先是解释了 GPT的原理【单字接龙】进而引出GPT版本。\n是有三部训练的【开卷有益】【模板规范】【创作引导】。\n未来影响的【应用价值】和【社会影响】。\n【如何应对】ChatGPT 非常强大，但它仍是一个没有意识的工具，\n不会主动配合人，面对空洞的提问就给出空洞的回答，\n需要被【正确地使用】，才能发挥最大的价值。\n【克服抵触心】【个人学习能力】【国家的竞争力】\n1、ChatGPT是如何回答问题的\n答：ChatGPT的实质功能是单字接龙 长文由单字接龙的自回归所生成 通过提前训练才能让它生成人们想要的问答 训练方式是让它按照问答范例来做单字接龙 这样训练是为了让它学会「能举一反三的规律」 缺点是可能混淆记忆，无法直接查看和更新所学，且高度依赖学习材料。 2、Chat-GPT它是怎么被制造的，为什么它不是搜索引擎\n总结：\n开卷有益：【超大语言模型（LLM）】缺陷：【胡言乱语】需要规范。\n模板规范：【优质对话范例】，【什么该说什么不该说】引用台词：不利于XX的话不要说。\n进而引发【回答不知道】，【你说问题的是错误的】，在回答二极管问题时【不仅仅是回答对错而是原因】。\n创意引导：根据【人类对它生成答案的好坏评分】来调节模型，以引导它生成人类认可的【创意回答】。\n【使ChatGPT变成既懂规矩又会试探】的聊天机器人。\n：\n我的理解是GPT家族的模型并不真的理解语意，把句子和句意联系起来。它们“能够明确接受到的语言符号”\n引用作者总结:\n（1）对于ChatGPT而言，一个token是一个语言符号。\n（2）“能够明确接受到的语言符号”是指，它能够明白你发的这个单词，是它字典中的哪个一，甚至包不包括在它的字典中，也可以「明确」。\n（3）不同符号间的关系就是，A句子和B词汇，到底说的是不是一回事，它能判断。\n（4）ChatGPT的强，在于第三章提到的「涌现能力」，至于为什么会出现这几个能力，大家还在研究\n3、它有哪些惊人能力，为什么它不只是聊天机器人\n4、它将给社会带来什么样的冲击\n首先要讨论的就是「大语言模型能为人类做什么」，只有弄清楚这一点，才有依据判断「它对社会的影响」。\n【应用价值】自然语言处理技术（NLP）应运而生，也就是 ChatGPT 所隶属的技术，其目标是让机器“理解”自然语言，协助人类处理繁琐的语言类工作，所以 NLP 也被誉为“人工智能皇冠上的明珠”。\n【社会影响的预测】由于大语言模型所能改善的是：群体协作过程中「创造、继承、应用知识」时的「语言处理效率」。所以随着技术的发展，大语言模型对社会的影响范围将和当初「电脑的影响范围」一样，即「全社会」。\n引用作者总结：\n跟「搜索引擎」结合：帮助用户精准寻找和筛选信息，比如，微软的 new bing。 跟「笔记工具」结合，辅助阅读和写作，比如，notion，Flow us，wolai。 跟「办公软件」结合，辅助文字处理、数据分析和演示制作，比如，office的下一步动作。 跟「教育培训」结合，定制个人的学习计划和学习材料，全天家教。 跟「开发工具」结合，辅助编写业务代码、调试纠错。 跟「动画小说」结合，辅助小说配图、配乐。 跟「客服系统」结合，7x24小时随便问，没有任何情绪。 跟「视频会议」结合，多语翻译、会议记录与总结、谈话查找。 跟「评论审核」结合，筛选评论、统计舆论、给出提醒。 跟「行业顾问」结合，提供法律、医疗、健身等指导。 跟「社交媒体」结合，帮助找到兴趣相投的用户和话题 。 跟「视频娱乐」结合，个性化推荐音乐、电影、小说、动漫。 跟「游戏剧情」结合，让 NPC 给玩家带来更灵活的对话体验。 大语言模型对【网络安全】的威胁。\n5、我们该如何维持未来的竞争力\nChatGPT并不会让你失业，但会熟练使用ChatGPT的人会让你失业。\n引用作者总结：\n总的来说，ChatGPT 的出现确实带来了各种各样的问题和风险：存在准确性和可解释性的缺陷，存在科技伦理安全和结构性失业的冲击，存在民族文化和意识形态的侵袭。\n但这些问题和风险，所有国家都要面对，一样会有害怕和抵触的情绪，我们应该利用这一点，率先克服抵触心理，反过来抓住 ChatGPT 的机会，率先研究大语言模型的改进和配套技术的重组；率先培养终身学习能力和推动教育改革；率先做好科技伦理的约束和换岗转行的防备；主动输出我们的文化和价值观。\n最后，我非常喜欢一个UP说过的一句话：【工具无法取代人，只有会用工具的人取代不会工具的人】\n真正需要害怕的是我们「无法成为会用工具的人」，可并没有人阻止我们探索工具，能够阻止我们的只有我们自己的心态和学习能力。\n谢谢各位看到最后。\n希望对阅读笔记的朋友有些帮助。\n总结3 ChatGPT技术可以影响整个人类社会。 **工作原理：**包括生成下一个字、自回归生成、模型本身的影响等; **训练方式：**使用学习材料来训练模型，并让模型学习提问和回答的通用规律，以便在未被记忆的情况下仍能生成用户想要的回答； ChatGPT与搜索引擎的不同，ChatGPT可以创造不存在的文本，但也存在混淆记忆的风险。 ChatGPT的**实质功能：**单字接龙长文，通过提前训练才能让他生成人们想要的回答。 ChatGPT的内容无法被直接增删改查，决策缺乏可解释性，使用时带来安全风险。 ChatGPT高度依赖数据，需要提供数量足够多种类足够丰富，质量足够高的学习材料。 ChatGPT的三个训练阶段：开卷有益阶段、模板规范阶段和创意引导阶段。 **开卷有益阶段：**让ChatGPT对海量互联网文本做单词接龙，以扩充模型的词汇量和语言知识世界的信息与知识。 **模板规范阶段：**让ChatGPT对优质对话范例做单词接龙，以规范回答的对话模式和对话内容。 **创意引导阶段：**让ChatGPT根据人类对它生成答案的好坏评分来调整模型，以引导它生成人类认可的创意回答。 **ChatGPT涌现出的能力：**当单字接龙模型的规模达到一定程度后，就会涌现出理解指令、理解粒子、思维链等能力。 **ChatGPT的意义：**虽然ChatGPT从产品形态和技术创新上来看不够完善，但它完成了一次验证，让全球都看到了大语言模型的可行性，吸引全球大力开发和改进大语言模型。 大语言模型将变得更好用、更快速、更便宜，相关产品也会普及； 大语言模型能够进行语法校对、翻译等，但真正有价值的是在精通语言的基础上，能存储人类从古至今积累的世界知识； 自然语言处理技术的发展可以协助人类处理繁琐的语言类工作； 合理使用大语言模型可以让人们更快捷准确地接触各行各业的平均知识； 大语言模型与搜索引擎、办公软件、教育培训、医疗健身等方面结合可以帮助用户更精准地寻找和筛选信息； 学术界、教育界、商业界和内容生产行业受到的影响最大。 现有的人才培养模式难以适应未来的就业市场，教育界需要转变培养模式，以培养学习能力和创造能力为主； ChatGPT的出现迫使人们加速推进培养创新性人才的目标，需要对知识的层级做更精细的划分，并提供相应的培养工具和易于实施的普及方案; ChatGPT的使用带来了网络安全和社会安全的新挑战; 面对新工具，应掌握其优点和缺点，正确使用； 克服自己的抵触心理，做好终身学习的准备。 应试教育对学生的学习能力产生了负面影响，导致很多学生对学习概念的理解变得片面和扭曲。 重塑自己的终身学习能力是最困难的一步，需要克服长期养成的错误习惯。 ChatGPT会改变人类群体应用知识的方式和继承知识的方式，重塑人类学习系统，并带来新的认知革命，重组政治和社会。 ChatGPT的出现带来了各种各样的问题和风险，包括准确性和可解释性的缺陷，存在科技伦理安全和结构性失业的冲击，存在民族文化和意识形态的侵袭，但这些问题和风险所有国家都要面对。 视频呼吁利用ChatGPT的机会，率先研究大语言模型的改进和配套技术的重组，培养终身学习能力和推动教育改革，做好科技伦理的约束和换岗转行的防备，主动输出我们的文化和价值观。 ","date":"2024-03-20T00:00:00Z","permalink":"https://huuuuuuo.github.io/post/%E5%85%B3%E4%BA%8Egpt%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%BD%B1%E5%93%8D%E8%BD%AC%E8%BD%BD-copy/","section":"post","tags":["gpt","大模型","ai","人工智能","B站","视频"],"title":"关于GPT的底层原理和未来影响（转载）"},{"categories":["Tech"],"contents":"本文借鉴并修改自 Windows下使用hugo和Github Pages配置博客\n1 下载安装hugo 访问最新版本页面下载，推荐使用 Hugo extended 版本\n解压到某个目录，然后将该目录添加到环境变量中\n通过上述操作安装 hugo 程序后，就可以通过 hugo new site 命令进行网站创建、配置与本地调试了。 选择一个本地文件夹作为根目录，右键——Git Bash Here，输入下面的命令\n1hugo new site \u0026lt;site-name\u0026gt; 注：后续命令未经说明，均在 Git Bash 中的 E:\\Workspace\\blog 目录下运行\n2、主题 2.1 安装 初始化你的项目目录为一个空的 Git 存储库，将主题克隆到 themes 目录中，将其作为 [Git 子模块][git-submodule] 添加到您的项目中。\n1git init 2git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 2.2 基础配置 用VScode打开E:\\Workspace\\blog文件夹，用下面的内容覆盖hugo.toml文件。并自行修改baseURL和title。 其中，baseURL为你的github账户名.github.io，也可以像我一样设置自定义域名。记得逐项修改为你的配置。\n1# ===================================================================================== 2# It\u0026#39;s recommended to use Alternate Theme Config to configure FixIt 3# Modifying this file may result in merge conflict 4# ===================================================================================== 5 6# ------------------------------------------------------------------------------------- 7# Hugo Configuration 8# See: https://gohugo.io/getting-started/configuration/ 9# ------------------------------------------------------------------------------------- 10 11# 网站标题 12title = \u0026#34;云吱的小站\u0026#34; 13# Hostname (and path) to the root 14baseURL = \u0026#34;https://haoyep.com/\u0026#34; 15# baseURL = \u0026#34;https://leegical.github.io/\u0026#34; 16# 更改使用 Hugo 构建网站时使用的默认主题 17theme = [\u0026#34;FixIt\u0026#34;] 18# determines default content language [\u0026#34;en\u0026#34;, \u0026#34;zh-cn\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] 19defaultContentLanguage = \u0026#34;zh-cn\u0026#34; 20# 网站语言, 仅在这里 CN 大写 [\u0026#34;en\u0026#34;, \u0026#34;zh-CN\u0026#34;, \u0026#34;fr\u0026#34;, \u0026#34;pl\u0026#34;, ...] 21languageCode = \u0026#34;zh-CN\u0026#34; 22# 语言名称 [\u0026#34;English\u0026#34;, \u0026#34;简体中文\u0026#34;, \u0026#34;Français\u0026#34;, \u0026#34;Polski\u0026#34;, ...] 23languageName = \u0026#34;简体中文\u0026#34; 24# 是否包括中日韩文字 25hasCJKLanguage = true 26# default amount of posts in each pages 27paginate = 12 28# copyright description used only for seo schema 29copyright = \u0026#34;\u0026#34; 30# whether to use robots.txt 31enableRobotsTXT = true 32# whether to use git commit log 33enableGitInfo = true 34# whether to use emoji code 35enableEmoji = true 36 37# ------------------------------------------------------------------------------------- 38# Menu Configuration 39# See: https://fixit.lruihao.cn/documentation/basics/#menu-configuration 40# ------------------------------------------------------------------------------------- 41 42[menu] 43 [[menu.main]] 44 identifier = \u0026#34;posts\u0026#34; 45 # you can add extra information before the name (HTML format is supported), such as icons 46 pre = \u0026#34;\u0026#34; 47 # you can add extra information after the name (HTML format is supported), such as icons 48 post = \u0026#34;\u0026#34; 49 name = \u0026#34;文章\u0026#34; 50 url = \u0026#34;/posts/\u0026#34; 51 # title will be shown when you hover on this menu link 52 title = \u0026#34;\u0026#34; 53 weight = 1 54 # FixIt 0.2.14 | NEW add user-defined content to menu items 55 [menu.main.params] 56 # add css class to a specific menu item 57 class = \u0026#34;\u0026#34; 58 # whether set as a draft menu item whose function is similar to a draft post/page 59 draft = false 60 # FixIt 0.2.16 | NEW add fontawesome icon to a specific menu item 61 icon = \u0026#34;fa-solid fa-archive\u0026#34; 62 # FixIt 0.2.16 | NEW set menu item type, optional values: [\u0026#34;mobile\u0026#34;, \u0026#34;desktop\u0026#34;] 63 type = \u0026#34;\u0026#34; 64 [[menu.main]] 65 identifier = \u0026#34;categories\u0026#34; 66 pre = \u0026#34;\u0026#34; 67 post = \u0026#34;\u0026#34; 68 name = \u0026#34;分类\u0026#34; 69 url = \u0026#34;/categories/\u0026#34; 70 title = \u0026#34;\u0026#34; 71 weight = 2 72 [menu.main.params] 73 icon = \u0026#34;fa-solid fa-th\u0026#34; 74 [[menu.main]] 75 identifier = \u0026#34;tags\u0026#34; 76 pre = \u0026#34;\u0026#34; 77 post = \u0026#34;\u0026#34; 78 name = \u0026#34;标签\u0026#34; 79 url = \u0026#34;/tags/\u0026#34; 80 title = \u0026#34;\u0026#34; 81 weight = 3 82 [menu.main.params] 83 icon = \u0026#34;fa-solid fa-tags\u0026#34; 84 85# ------------------------------------------------------------------------------------- 86# Theme Core Configuration 87# See: https://fixit.lruihao.cn/documentation/basics/#theme-configuration 88# ------------------------------------------------------------------------------------- 89 90[params] 91 # FixIt 0.2.15 | CHANGED FixIt theme version 92 version = \u0026#34;0.2.X\u0026#34; # e.g. \u0026#34;0.2.X\u0026#34;, \u0026#34;0.2.15\u0026#34;, \u0026#34;v0.2.15\u0026#34; etc. 93 # 网站描述 94 description = \u0026#34;\u0026#34; 95 # 网站关键词 96 keywords = [\u0026#34;程序员\u0026#34;] 97 # 网站默认主题样式 [\u0026#34;light\u0026#34;, \u0026#34;dark\u0026#34;, \u0026#34;auto\u0026#34;] 98 defaultTheme = \u0026#34;auto\u0026#34; 99 # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 100 gitRepo = \u0026#34;\u0026#34; 101 # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI 102 # [\u0026#34;sha256\u0026#34;, \u0026#34;sha384\u0026#34;, \u0026#34;sha512\u0026#34;, \u0026#34;md5\u0026#34;] 103 fingerprint = \u0026#34;sha256\u0026#34; 104 # 日期格式 105 dateFormat = \u0026#34;2006-01-02\u0026#34; 106 # 网站图片，用于 Open Graph 和 Twitter Cards 107 images = [\u0026#34;/logo.png\u0026#34;] 108 # 开启 PWA 支持 109 enablePWA = true 110 # 是否自动显示外链图标 111 externalIcon = false 112 # 默认情况下，FixIt 只会在主页的 HTML 头中注入主题元标记 113 # 您可以将其关闭，但如果您不这样做，我们将不胜感激，因为这是观察 FixIt 受欢迎程度上升的好方法 114 disableThemeInject = false 115 116 # 作者配置 117 [params.author] 118 name = \u0026#34;\u0026#34; 119 email = \u0026#34;\u0026#34; 120 link = \u0026#34;\u0026#34; 121 avatar = \u0026#34;\u0026#34; 122 123 # 应用图标配置 124 [params.app] 125 # 当添加到 iOS 主屏幕或者 Android 启动器时的标题，覆盖默认标题 126 title = \u0026#34;云吱的小站\u0026#34; 127 # 是否隐藏网站图标资源链接 128 noFavicon = false 129 # 更现代的 SVG 网站图标，可替代旧的 .png 和 .ico 文件 130 svgFavicon = \u0026#34;/favicon.svg\u0026#34; 131 # Safari 图标颜色 132 iconColor = \u0026#34;#5bbad5\u0026#34; 133 # Windows v8-10 磁贴颜色 134 tileColor = \u0026#34;#da532c\u0026#34; 135 # Android 浏览器主题色 136 [params.app.themeColor] 137 light = \u0026#34;#f8f8f8\u0026#34; 138 dark = \u0026#34;#252627\u0026#34; 139 140 # 搜索配置 141 [params.search] 142 enable = true 143 # 搜索引擎的类型 [\u0026#34;lunr\u0026#34;, \u0026#34;algolia\u0026#34;, \u0026#34;fuse\u0026#34;] 144 type = \u0026#34;lunr\u0026#34; 145 # 文章内容最长索引长度 146 contentLength = 4000 147 # 搜索框的占位提示语 148 placeholder = \u0026#34;\u0026#34; 149 # 最大结果数目 150 maxResultLength = 10 151 # 结果内容片段长度 152 snippetLength = 50 153 # 搜索结果中高亮部分的 HTML 标签 154 highlightTag = \u0026#34;em\u0026#34; 155 # 是否在搜索索引中使用基于 baseURL 的绝对路径 156 absoluteURL = false 157 [params.search.algolia] 158 index = \u0026#34;\u0026#34; 159 appID = \u0026#34;\u0026#34; 160 searchKey = \u0026#34;\u0026#34; 161 [params.search.fuse] 162 # https://fusejs.io/api/options.html 163 isCaseSensitive = false 164 minMatchCharLength = 2 165 findAllMatches = false 166 location = 0 167 threshold = 0.3 168 distance = 100 169 ignoreLocation = false 170 useExtendedSearch = false 171 ignoreFieldNorm = false 172 173 # 页面头部导航栏配置 174 [params.header] 175 # 桌面端导航栏模式 [\u0026#34;sticky\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;] 176 desktopMode = \u0026#34;sticky\u0026#34; 177 # 移动端导航栏模式 [\u0026#34;sticky\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;] 178 mobileMode = \u0026#34;auto\u0026#34; 179 # 页面头部导航栏标题配置 180 [params.header.title] 181 # LOGO 的 URL 182 logo = \u0026#34;/logo.png\u0026#34; 183 # 标题名称 184 name = \u0026#34;云吱的小站\u0026#34; 185 # 你可以在名称（允许 HTML 格式）之前添加其他信息，例如图标 186 pre = \u0026#34;\u0026#34; 187 # 你可以在名称（允许 HTML 格式）之后添加其他信息，例如图标 188 post = \u0026#34;\u0026#34; 189 # 是否为标题显示打字机动画 190 typeit = false 191 # 页面头部导航栏副标题配置 192 [params.header.subtitle] 193 # 副标题名称 194 name = \u0026#34;\u0026#34; 195 # 是否为副标题显示打字机动画 196 typeit = false 197 198 # FixIt 0.2.18 | NEW Breadcrumb config 199 [params.breadcrumb] 200 enable = false 201 sticky = false 202 showHome = false 203 204 # 页面底部信息配置 205 [params.footer] 206 enable = true 207 # 自定义内容（支持 HTML 格式） 208 # 进阶使用，见参数 `params.customFilePath.footer` 209 custom = \u0026#34;\u0026#34; 210 # 是否显示 Hugo 和主题信息 211 hugo = false 212 # 是否显示版权信息 213 copyright = true 214 # 是否显示作者 215 author = true 216 # 网站创立年份 217 since = 2019 218 # 是否显示网站内容总字数 219 wordCount = true 220 # 公网安备信息，仅在中国使用（支持 HTML 格式） 221 gov = \u0026#34;\u0026#34; 222 # ICP 备案信息，仅在中国使用（支持 HTML 格式） 223 icp = \u0026#34;\u0026#34; 224 # 许可协议信息（支持 HTML 格式） 225 license = \u0026#39;\u0026lt;a rel=\u0026#34;license external nofollow noopener noreferrer\u0026#34; href=\u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;CC BY-NC 4.0\u0026lt;/a\u0026gt;\u0026#39; 226 # 网站创立时间 227 [params.footer.siteTime] 228 enable = true 229 animate = true 230 icon = \u0026#34;fa-solid fa-heartbeat\u0026#34; 231 pre = \u0026#34;\u0026#34; 232 value = \u0026#34;2018-02-06T11:15:22+08:00\u0026#34; # e.g. \u0026#34;2021-12-18T16:15:22+08:00\u0026#34; 233 # 页面底部行排序，可选值：[\u0026#34;first\u0026#34;, 0, 1, 2, 3, 4, 5, \u0026#34;last\u0026#34;] 234 [params.footer.order] 235 powered = 0 236 copyright = 0 237 statistics = 0 238 visitor = 0 239 beian = 0 240 241 # Section（所有文章）页面配置 242 [params.section] 243 # section 页面每页显示文章数量 244 paginate = 20 245 # 日期格式（月和日） 246 dateFormat = \u0026#34;01-02\u0026#34; 247 # RSS 文章数目 248 rss = 10 249 # 最近更新文章设置 250 [params.section.recentlyUpdated] 251 enable = true 252 rss = true 253 days = 30 254 maxCount = 10 255 256 # List（目录或标签）页面配置 257 [params.list] 258 # list 页面每页显示文章数量 259 paginate = 20 260 # 日期格式（月和日） 261 dateFormat = \u0026#34;01-02\u0026#34; 262 # RSS 文章数目 263 rss = 10 264 265 # 标签云配置 266 [params.tagcloud] 267 enable = false 268 min = 14 # 最小字体大小，单位：px 269 max = 32 # 最大字体大小，单位：px 270 peakCount = 10 # 每个标签的最大文章数 271 orderby = \u0026#34;name\u0026#34; # 标签排序方式，可选值：[\u0026#34;name\u0026#34;, \u0026#34;count\u0026#34;] 272 273 # 主页配置 274 [params.home] 275 # RSS 文章数目 276 rss = 10 277 # 主页个人信息 278 [params.home.profile] 279 enable = true 280 # Gravatar 邮箱，用于优先在主页显示的头像 281 gravatarEmail = \u0026#34;\u0026#34; 282 # 主页显示头像的 URL 283 avatarURL = \u0026#34;/avatar.jpg\u0026#34; 284 # 头像菜单链接的 identifier 285 avatarMenu = \u0026#34;\u0026#34; 286 # 主页显示的网站标题（支持 HTML 格式） 287 title = \u0026#34;云吱的小站\u0026#34; 288 # 主页显示的网站副标题 289 subtitle = \u0026#34;色相事一刹那，光阴里无尽藏\u0026#34; 290 # 是否为副标题显示打字机动画 291 typeit = true 292 # 是否显示社交账号 293 social = true 294 # 免责声明（支持 HTML 格式） 295 disclaimer = \u0026#34;\u0026#34; 296 # 主页文章列表 297 [params.home.posts] 298 enable = true 299 # 主页每页显示文章数量 300 paginate = 10 301 302 # FixIt 0.2.16 | CHANGED Social config about the author 303 [params.social] 304 GitHub = \u0026#34;\u0026#34; 305 Linkedin = \u0026#34;\u0026#34; 306 Twitter = \u0026#34;\u0026#34; 307 Instagram = \u0026#34;\u0026#34; 308 Facebook = \u0026#34;\u0026#34; 309 Telegram = \u0026#34;\u0026#34; 310 Medium = \u0026#34;\u0026#34; 311 Gitlab = \u0026#34;\u0026#34; 312 Youtubelegacy = \u0026#34;\u0026#34; 313 Youtubecustom = \u0026#34;\u0026#34; 314 Youtubechannel = \u0026#34;\u0026#34; 315 Tumblr = \u0026#34;\u0026#34; 316 Quora = \u0026#34;\u0026#34; 317 Keybase = \u0026#34;\u0026#34; 318 Pinterest = \u0026#34;\u0026#34; 319 Reddit = \u0026#34;\u0026#34; 320 Codepen = \u0026#34;\u0026#34; 321 FreeCodeCamp = \u0026#34;\u0026#34; 322 Bitbucket = \u0026#34;\u0026#34; 323 Stackoverflow = \u0026#34;\u0026#34; 324 Weibo = \u0026#34;\u0026#34; 325 Odnoklassniki = \u0026#34;\u0026#34; 326 VK = \u0026#34;\u0026#34; 327 Flickr = \u0026#34;\u0026#34; 328 Xing = \u0026#34;\u0026#34; 329 Snapchat = \u0026#34;\u0026#34; 330 Soundcloud = \u0026#34;\u0026#34; 331 Spotify = \u0026#34;\u0026#34; 332 Bandcamp = \u0026#34;\u0026#34; 333 Paypal = \u0026#34;\u0026#34; 334 Fivehundredpx = \u0026#34;\u0026#34; 335 Mix = \u0026#34;\u0026#34; 336 Goodreads = \u0026#34;\u0026#34; 337 Lastfm = \u0026#34;\u0026#34; 338 Foursquare = \u0026#34;\u0026#34; 339 Hackernews = \u0026#34;\u0026#34; 340 Kickstarter = \u0026#34;\u0026#34; 341 Patreon = \u0026#34;\u0026#34; 342 Steam = \u0026#34;\u0026#34; 343 Twitch = \u0026#34;\u0026#34; 344 Strava = \u0026#34;\u0026#34; 345 Skype = \u0026#34;\u0026#34; 346 Whatsapp = \u0026#34;\u0026#34; 347 Zhihu = \u0026#34;\u0026#34; 348 Douban = \u0026#34;\u0026#34; 349 Angellist = \u0026#34;\u0026#34; 350 Slidershare = \u0026#34;\u0026#34; 351 Jsfiddle = \u0026#34;\u0026#34; 352 Deviantart = \u0026#34;\u0026#34; 353 Behance = \u0026#34;\u0026#34; 354 Dribbble = \u0026#34;\u0026#34; 355 Wordpress = \u0026#34;\u0026#34; 356 Vine = \u0026#34;\u0026#34; 357 Googlescholar = \u0026#34;\u0026#34; 358 Researchgate = \u0026#34;\u0026#34; 359 Mastodon = \u0026#34;\u0026#34; 360 Thingiverse = \u0026#34;\u0026#34; 361 Devto = \u0026#34;\u0026#34; 362 Gitea = \u0026#34;\u0026#34; 363 XMPP = \u0026#34;\u0026#34; 364 Matrix = \u0026#34;\u0026#34; 365 Bilibili = \u0026#34;\u0026#34; 366 ORCID = \u0026#34;\u0026#34; 367 Liberapay = \u0026#34;\u0026#34; 368 Ko-Fi = \u0026#34;\u0026#34; 369 BuyMeaCoffee = \u0026#34;\u0026#34; 370 Linktree = \u0026#34;\u0026#34; 371 QQ = \u0026#34;\u0026#34; 372 QQGroup = \u0026#34;\u0026#34; # https://qun.qq.com/join.html 373 Diaspora = \u0026#34;\u0026#34; 374 CSDN = \u0026#34;\u0026#34; 375 Discord = \u0026#34;\u0026#34; 376 DiscordInvite = \u0026#34;\u0026#34; 377 Lichess = \u0026#34;\u0026#34; 378 Pleroma = \u0026#34;\u0026#34; 379 Kaggle = \u0026#34;\u0026#34; 380 MediaWiki= \u0026#34;\u0026#34; 381 Plume = \u0026#34;\u0026#34; 382 HackTheBox = \u0026#34;\u0026#34; 383 RootMe = \u0026#34;\u0026#34; 384 Feishu = \u0026#34;\u0026#34; 385 TryHackMe = \u0026#34;\u0026#34; 386 Douyin = \u0026#34;\u0026#34; 387 TikTok = \u0026#34;\u0026#34; 388 Phone = \u0026#34;\u0026#34; 389 Email = \u0026#34;\u0026#34; 390 RSS = true 391 392 # 文章页面配置 393 [params.page] 394 # 是否启用文章作者头像 395 authorAvatar = true 396 # 是否在主页隐藏一篇文章 397 hiddenFromHomePage = false 398 # 是否在搜索结果中隐藏一篇文章 399 hiddenFromSearch = false 400 # 是否使用 twemoji 401 twemoji = false 402 # 是否使用 lightgallery 403 # 如果设为 \u0026#34;force\u0026#34;，文章中的图片将强制按照画廊形式呈现 404 lightgallery = true 405 # 是否使用 ruby 扩展语法 406 ruby = true 407 # 是否使用 fraction 扩展语法 408 fraction = true 409 # 是否使用 fontawesome 扩展语法 410 fontawesome = true 411 # 许可协议信息（支持 HTML 格式） 412 license = \u0026#39;\u0026lt;a rel=\u0026#34;license external nofollow noopener noreferrer\u0026#34; href=\u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;CC BY-NC 4.0\u0026lt;/a\u0026gt;\u0026#39; 413 # 是否在文章页面显示原始 Markdown 文档链接 414 linkToMarkdown = true 415 # 是否在 RSS 中显示全文内容 416 rssFullText = false 417 # 页面样式 [\u0026#34;narrow\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;wide\u0026#34;, ...] 418 pageStyle = \u0026#34;normal\u0026#34; 419 # 强制使用 Gravatar 作为作者头像 420 # gravatarForce = true 421 # 开启自动书签支持 422 # 如果为 true，则在关闭页面时保存阅读进度 423 autoBookmark = true 424 # 是否使用 字数统计 425 wordCount = true 426 # 是否使用 预计阅读 427 readingTime = true 428 # 文章结束标志 429 endFlag = \u0026#34;\u0026#34; 430 # 是否开启即时页面 431 instantPage = false 432 # FixIt 0.3.0 | 是否在侧边栏开启合集 433 collectionList = true 434 # FixIt 0.3.0 | NEW whether to enable collection navigation at the end of the post 435 collectionNavigation = false 436 437 # FixIt 0.2.15 | 转载配置 438 [params.page.repost] 439 enable = false 440 url = \u0026#34;\u0026#34; 441 # 目录配置 442 [params.page.toc] 443 # 是否使用目录 444 enable = true 445 # 是否保持使用文章前面的静态目录 446 keepStatic = false 447 # 是否使侧边目录自动折叠展开 448 auto = false 449 # 目录位置 [\u0026#34;left\u0026#34;, \u0026#34;right\u0026#34;] 450 position = \u0026#34;right\u0026#34; 451 # 在文章开头显示提示信息，提醒读者文章内容可能过时 452 [params.page.expirationReminder] 453 enable = true 454 # 如果文章最后更新于这天数之前，显示提醒 455 reminder = 90 456 # 如果文章最后更新于这天数之前，显示警告 457 warning = 180 458 # 如果文章到期是否关闭评论 459 closeComment = false 460 # FixIt 0.2.16 | 数学公式 CHANGED KaTeX mathematical formulas (https://katex.org) 461 [params.page.math] 462 enable = true 463 # 默认行内定界符是 $ ... $ 和 \\( ... \\) 464 inlineLeftDelimiter = \u0026#34;\u0026#34; 465 inlineRightDelimiter = \u0026#34;\u0026#34; 466 # 默认块定界符是 $$ ... $$, \\[ ... \\], \\begin{equation} ... \\end{equation} 和一些其它的函数 467 blockLeftDelimiter = \u0026#34;\u0026#34; 468 blockRightDelimiter = \u0026#34;\u0026#34; 469 # KaTeX 插件 copy_tex 470 copyTex = true 471 # KaTeX 插件 mhchem 472 mhchem = true 473 # 代码配置 474 [params.page.code] 475 # 是否显示代码块的复制按钮 476 copy = true 477 # 是否显示代码块的编辑按钮 478 edit = true 479 # 默认展开显示的代码行数 480 maxShownLines = 10 481 # FixIt 0.2.14 | 文章编辑 482 [params.page.edit] 483 enable = false 484 # FixIt 0.2.15 | 编辑的基础链接 485 # url = \u0026#34;/edit/branch-name/subdirectory-name\u0026#34; # base on `params.gitRepo` 486 # url = \u0026#34;https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name\u0026#34; # full url 487 url = \u0026#34;\u0026#34; 488 # FixIt 0.2.0 | Mapbox GL JS 配置 (https://docs.mapbox.com/mapbox-gl-js) 489 [params.page.mapbox] 490 # Mapbox GL JS 的 access token 491 accessToken = \u0026#34;\u0026#34; 492 # 浅色主题的地图样式 493 lightStyle = \u0026#34;mapbox://styles/mapbox/light-v9\u0026#34; 494 # 深色主题的地图样式 495 darkStyle = \u0026#34;mapbox://styles/mapbox/dark-v9\u0026#34; 496 # 是否添加 NavigationControl 497 navigation = true 498 # 是否添加 GeolocateControl 499 geolocate = true 500 # 是否添加 ScaleControl 501 scale = true 502 # 是否添加 FullscreenControl 503 fullscreen = true 504 # FixIt 0.2.17 | NEW 赞赏设置 505 [params.page.reward] 506 enable = false 507 animation = false 508 # 相对于页脚的位置，可选值：[\u0026#34;before\u0026#34;, \u0026#34;after\u0026#34;] 509 position = \u0026#34;after\u0026#34; 510 # comment = \u0026#34;Buy me a coffee\u0026#34; 511 # 二维码图片展示模式，可选值：[\u0026#34;static\u0026#34;, \u0026#34;fixed\u0026#34;]，默认：`static` 512 mode = \u0026#34;static\u0026#34; 513 [params.page.reward.ways] 514 # wechatpay = \u0026#34;/images/wechatpay.png\u0026#34; 515 # alipay = \u0026#34;/images/alipay.png\u0026#34; 516 # paypal = \u0026#34;/images/paypal.png\u0026#34; 517 # bitcoin = \u0026#34;/images/bitcoin.png\u0026#34; 518 # 文章页面的分享信息设置 519 [params.page.share] 520 enable = true 521 Twitter = true 522 Facebook = true 523 Linkedin = false 524 Whatsapp = true 525 Pinterest = false 526 Tumblr = false 527 HackerNews = false 528 Reddit = false 529 VK = false 530 Buffer = false 531 Xing = false 532 Line = true 533 Instapaper = false 534 Pocket = false 535 Flipboard = false 536 Weibo = true 537 Myspace = true 538 Blogger = true 539 Baidu = false 540 Odnoklassniki = false 541 Evernote = true 542 Skype = false 543 Trello = false 544 Mix = false 545 # 评论系统设置 546 [params.page.comment] 547 enable = true 548 # FixIt 0.2.13 | NEW Artalk comment config (https://artalk.js.org/) 549 [params.page.comment.artalk] 550 enable = false 551 server = \u0026#34;https://yourdomain\u0026#34; 552 site = \u0026#34;默认站点\u0026#34; 553 placeholder = \u0026#34;\u0026#34; 554 noComment = \u0026#34;\u0026#34; 555 sendBtn = \u0026#34;\u0026#34; 556 editorTravel = true 557 flatMode = \u0026#34;auto\u0026#34; 558 # FixIt 0.2.17 | CHANGED enable lightgallery support 559 lightgallery = false 560 locale = \u0026#34;\u0026#34; # FixIt 0.2.15 | NEW 561 # FixIt 0.2.18 | NEW 562 emoticons = \u0026#34;\u0026#34; 563 nestMax = 2 564 nestSort = \u0026#34;DATE_ASC\u0026#34; # [\u0026#34;DATE_ASC\u0026#34;, \u0026#34;DATE_DESC\u0026#34;, \u0026#34;VOTE_UP_DESC\u0026#34;] 565 vote = true 566 voteDown = false 567 uaBadge = true 568 listSort = true 569 imgUpload = true 570 preview = true 571 versionCheck = true 572 # FixIt 0.1.1 | NEW Disqus comment config (https://disqus.com) 573 [params.page.comment.disqus] 574 enable = false 575 # Disqus shortname to use Disqus in posts 576 shortname = \u0026#34;\u0026#34; 577 # FixIt 0.1.1 | NEW Gitalk comment config (https://github.com/gitalk/gitalk) 578 [params.page.comment.gitalk] 579 enable = false 580 owner = \u0026#34;\u0026#34; 581 repo = \u0026#34;\u0026#34; 582 clientId = \u0026#34;\u0026#34; 583 clientSecret = \u0026#34;\u0026#34; 584 # Valine comment config (https://github.com/xCss/Valine) 585 [params.page.comment.valine] 586 enable = false 587 appId = \u0026#34;\u0026#34; 588 appKey = \u0026#34;\u0026#34; 589 placeholder = \u0026#34;\u0026#34; 590 avatar = \u0026#34;mp\u0026#34; 591 meta = \u0026#34;\u0026#34; 592 requiredFields = \u0026#34;\u0026#34; 593 pageSize = 10 594 lang = \u0026#34;\u0026#34; 595 visitor = true 596 recordIP = true 597 highlight = true 598 enableQQ = false 599 serverURLs = \u0026#34;\u0026#34; 600 # FixIt 0.2.6 | NEW emoji data file name, default is \u0026#34;google.yml\u0026#34; 601 # [\u0026#34;apple.yml\u0026#34;, \u0026#34;google.yml\u0026#34;, \u0026#34;facebook.yml\u0026#34;, \u0026#34;twitter.yml\u0026#34;] 602 # located in \u0026#34;themes/FixIt/assets/lib/valine/emoji/\u0026#34; directory 603 # you can store your own data files in the same path under your project: 604 # \u0026#34;assets/lib/valine/emoji/\u0026#34; 605 emoji = \u0026#34;\u0026#34; 606 commentCount = true # FixIt 0.2.13 | NEW 607 # FixIt 0.2.16 | CHANGED Waline comment config (https://waline.js.org) 608 [params.page.comment.waline] 609 enable = false 610 serverURL = \u0026#34;\u0026#34; 611 pageview = false # FixIt 0.2.15 | NEW 612 emoji = [\u0026#34;//unpkg.com/@waline/emojis@1.1.0/weibo\u0026#34;] 613 meta = [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;, \u0026#34;link\u0026#34;] 614 requiredMeta = [] 615 login = \u0026#34;enable\u0026#34; 616 wordLimit = 0 617 pageSize = 10 618 imageUploader = false # FixIt 0.2.15 | NEW 619 highlighter = false # FixIt 0.2.15 | NEW 620 comment = false # FixIt 0.2.15 | NEW 621 texRenderer = false # FixIt 0.2.16 | NEW 622 search = false # FixIt 0.2.16 | NEW 623 recaptchaV3Key = \u0026#34;\u0026#34; # FixIt 0.2.16 | NEW 624 reaction = false # FixIt 0.2.18 | NEW 625 # Facebook comment config (https://developers.facebook.com/docs/plugins/comments) 626 [params.page.comment.facebook] 627 enable = false 628 width = \u0026#34;100%\u0026#34; 629 numPosts = 10 630 appId = \u0026#34;\u0026#34; 631 languageCode = \u0026#34;\u0026#34; 632 # FixIt 0.2.0 | NEW Telegram comments config (https://comments.app) 633 [params.page.comment.telegram] 634 enable = false 635 siteID = \u0026#34;\u0026#34; 636 limit = 5 637 height = \u0026#34;\u0026#34; 638 color = \u0026#34;\u0026#34; 639 colorful = true 640 dislikes = false 641 outlined = false 642 # FixIt 0.2.0 | NEW Commento comment config (https://commento.io) 643 [params.page.comment.commento] 644 enable = false 645 # FixIt 0.2.5 | NEW Utterances comment config (https://utteranc.es) 646 [params.page.comment.utterances] 647 enable = false 648 # owner/repo 649 repo = \u0026#34;\u0026#34; 650 issueTerm = \u0026#34;pathname\u0026#34; 651 label = \u0026#34;\u0026#34; 652 lightTheme = \u0026#34;github-light\u0026#34; 653 darkTheme = \u0026#34;github-dark\u0026#34; 654 # FixIt 0.2.13 | NEW Twikoo comment config (https://twikoo.js.org/) 655 [params.page.comment.twikoo] 656 enable = false 657 envId = \u0026#34;\u0026#34; 658 region = \u0026#34;\u0026#34; 659 path = \u0026#34;\u0026#34; 660 visitor = true 661 commentCount = true 662 # FixIt 0.2.17 | CHANGED enable lightgallery support 663 lightgallery = false 664 # FixIt 0.2.17 | NEW enable Katex support 665 katex = false 666 # Giscus 评论系统设置 667 [params.page.comment.giscus] 668 enable = true 669 repo = \u0026#34;\u0026#34; 670 repoId = \u0026#34;\u0026#34; 671 category = \u0026#34;\u0026#34; 672 categoryId = \u0026#34;\u0026#34; 673 mapping = \u0026#34;pathname\u0026#34; 674 strict = \u0026#34;0\u0026#34; # 675 term = \u0026#34;\u0026#34; 676 reactionsEnabled = \u0026#34;1\u0026#34; 677 emitMetadata = \u0026#34;0\u0026#34; 678 inputPosition = \u0026#34;top\u0026#34; # [\u0026#34;top\u0026#34;, \u0026#34;bottom\u0026#34;] 679 lightTheme = \u0026#34;light\u0026#34; 680 darkTheme = \u0026#34;dark\u0026#34; 681 lazyLoad = true 682 # 第三方库配置 683 [params.page.library] 684 [params.page.library.css] 685 # someCSS = \u0026#34;some.css\u0026#34; 686 # 位于 \u0026#34;assets/\u0026#34; 687 # 或者 688 # someCSS = \u0026#34;https://cdn.example.com/some.css\u0026#34; 689 [params.page.library.js] 690 # someJavascript = \u0026#34;some.js\u0026#34; 691 # 位于 \u0026#34;assets/\u0026#34; 692 # 或者 693 # someJavascript = \u0026#34;https://cdn.example.com/some.js\u0026#34; 694 # 页面 SEO 配置 695 [params.page.seo] 696 # 图片 URL 697 images = [\u0026#34;/favicon.ico\u0026#34;] 698 # 出版者信息 699 [params.page.seo.publisher] 700 name = \u0026#34;云吱\u0026#34; 701 logoUrl = \u0026#34;/logo.png\u0026#34; 702 703 # TypeIt 配置 704 [params.typeit] 705 # 每一步的打字速度（单位是毫秒） 706 speed = 100 707 # 光标的闪烁速度（单位是毫秒） 708 cursorSpeed = 1000 709 # 光标的字符（支持 HTML 格式） 710 cursorChar = \u0026#34;|\u0026#34; 711 # 打字结束之后光标的持续时间（单位是毫秒，\u0026#34;-1\u0026#34; 代表无限大） 712 duration = -1 713 # 打字完成后是否会连续循环 714 loop = false 715 716 # Mermaid 配置 717 [params.mermaid] 718 # 取值详见 https://mermaid.js.org/config/theming.html#available-themes 719 themes = [\u0026#34;default\u0026#34;, \u0026#34;dark\u0026#34;] 720 721 # 盘古之白配置 722 [params.pangu] 723 # 适用于中文写作用户 724 enable = true 725 selector = \u0026#34;article\u0026#34; # 726 727 # 水印配置 728 # 详细参数见 https://github.com/Lruihao/watermark#readme 729 [params.watermark] 730 enable = false 731 # 水印内容（允许 HTML 格式） 732 content = \u0026#34;\u0026#34; 733 # 水印透明度 734 opacity = 0.1 735 # 水印父节点 736 appendTo = \u0026#34;.wrapper\u0026gt;main\u0026#34; 737 # 单水印宽度 单位：px 738 width = 150 739 # 单水印高度 单位：px 740 height = 20 741 # 水印行间距 单位：px 742 rowSpacing = 60 743 # 水印列间距 单位：px 744 colSpacing = 30 745 # 水印旋转角度 单位：deg 746 rotate = 15 747 # 水印字体大小，单位：rem 748 fontSize = 0.85 749 # 水印字体 750 fontFamily = \u0026#34;inherit\u0026#34; 751 752 # 不蒜子统计 753 [params.ibruce] 754 enable = true 755 # 在文章中开启 756 enablePost = true 757 758 # 网站验证代码，用于 Google/Bing/Yandex/Pinterest/Baidu/360/Sogou 759 [params.verification] 760 google = \u0026#34;\u0026#34; 761 bing = \u0026#34;\u0026#34; 762 yandex = \u0026#34;\u0026#34; 763 pinterest = \u0026#34;\u0026#34; 764 baidu = \u0026#34;\u0026#34; 765 so = \u0026#34;\u0026#34; 766 sogou = \u0026#34;\u0026#34; 767 768 # FixIt 0.2.10 | 网站 SEO 配置 769 [params.seo] 770 # 图片 URL 771 image = \u0026#34;/favicon.ico\u0026#34; 772 # 缩略图 URL 773 thumbnailUrl = \u0026#34;favicon-32x32.png\u0026#34; 774 775 # FixIt 0.2.0 | NEW 网站分析配置 776 [params.analytics] 777 enable = true 778 # Google Analytics 779 [params.analytics.google] 780 id = \u0026#34;\u0026#34; 781 # 是否匿名化用户 IP 782 anonymizeIP = true 783 # Fathom Analytics 784 [params.analytics.fathom] 785 id = \u0026#34;\u0026#34; 786 # 自行托管追踪器时的主机路径 787 server = \u0026#34;\u0026#34; 788 789 # FixIt 0.2.7 | NEW Cookie 许可配置 790 [params.cookieconsent] 791 enable = false 792 # 用于 Cookie 许可横幅的文本字符串 793 [params.cookieconsent.content] 794 message = \u0026#34;\u0026#34; 795 dismiss = \u0026#34;\u0026#34; 796 link = \u0026#34;\u0026#34; 797 798 # FixIt 0.2.7 | 第三方库文件的 CDN 设置 799 [params.cdn] 800 # CDN 数据文件名称，默认不启用 [\u0026#34;jsdelivr.yml\u0026#34;, \u0026#34;unpkg.yml\u0026#34;, ...] 801 # 位于 \u0026#34;themes/FixIt/assets/data/cdn/\u0026#34; 目录 802 # 可以在你的项目下相同路径存放你自己的数据文件：\u0026#34;assets/data/cdn/\u0026#34; 803 # data = \u0026#34;unpkg.yml\u0026#34; 804 805 # FixIt 0.2.8 | NEW 兼容性设置 806 [params.compatibility] 807 # 是否使用 Polyfill.io 来兼容旧式浏览器 808 polyfill = false 809 # 是否使用 object-fit-images 来兼容旧式浏览器 810 objectFit = false 811 812 # FixIt 0.2.14 | NEW 在左上角或者右上角显示 GitHub 开源链接 813 [params.githubCorner] 814 enable = false 815 permalink = \u0026#34;https://github.com/hugo-fixit/FixIt\u0026#34; 816 title = \u0026#34;在 GitHub 上查看源代码\u0026#34; 817 position = \u0026#34;right\u0026#34; # [\u0026#34;left\u0026#34;, \u0026#34;right\u0026#34;] 818 819 # FixIt 0.2.14 | NEW Gravatar 设置 820 [params.gravatar] 821 # 取决于作者邮箱，作者邮箱未设置则使用本地头像 822 enable = true 823 # Gravatar 主机，默认：“www.gravatar.com” 824 host = \u0026#34;cn.gravatar.com\u0026#34; # [\u0026#34;cn.gravatar.com\u0026#34;, \u0026#34;gravatar.loli.net\u0026#34;, ...] 825 style = \u0026#34;identicon\u0026#34; # [\u0026#34;\u0026#34;, \u0026#34;mp\u0026#34;, \u0026#34;identicon\u0026#34;, \u0026#34;monsterid\u0026#34;, \u0026#34;wavatar\u0026#34;, \u0026#34;retro\u0026#34;, \u0026#34;blank\u0026#34;, \u0026#34;robohash\u0026#34;] 826 827 # FixIt 0.2.16 | NEW 返回顶部 828 [params.backToTop] 829 enable = true 830 # 在 b2t 按钮中显示滚动百分比 831 scrollpercent = true 832 833 # FixIt 0.2.16 | NEW 阅读进度条 834 [params.readingProgress] 835 enable = true 836 # 可用值：[\u0026#34;left\u0026#34;, \u0026#34;right\u0026#34;] 837 start = \u0026#34;left\u0026#34; 838 # 可用值：[\u0026#34;top\u0026#34;, \u0026#34;bottom\u0026#34;] 839 position = \u0026#34;top\u0026#34; 840 reversed = false 841 light = \u0026#34;\u0026#34; 842 dark = \u0026#34;\u0026#34; 843 height = \u0026#34;2px\u0026#34; 844 845 # FixIt 0.2.17 | NEW 页面加载期间顶部的进度条 846 # 有关详细信息：https://github.com/CodeByZach/pace 847 [params.pace] 848 enable = false 849 # 所有可用颜色： 850 # [\u0026#34;black\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pink\u0026#34;, \u0026#34;purple\u0026#34;, \u0026#34;red\u0026#34;, \u0026#34;silver\u0026#34;, \u0026#34;white\u0026#34;, \u0026#34;yellow\u0026#34;] 851 color = \u0026#34;blue\u0026#34; 852 # 所有可用主题： 853 # [\u0026#34;barber-shop\u0026#34;, \u0026#34;big-counter\u0026#34;, \u0026#34;bounce\u0026#34;, \u0026#34;center-atom\u0026#34;, \u0026#34;center-circle\u0026#34;, \u0026#34;center-radar\u0026#34;, \u0026#34;center-simple\u0026#34;, 854 # \u0026#34;corner-indicator\u0026#34;, \u0026#34;fill-left\u0026#34;, \u0026#34;flash\u0026#34;, \u0026#34;flat-top\u0026#34;, \u0026#34;loading-bar\u0026#34;, \u0026#34;mac-osx\u0026#34;, \u0026#34;material\u0026#34;, \u0026#34;minimal\u0026#34;] 855 theme = \u0026#34;minimal\u0026#34; 856 857 # FixIt 0.2.18-lts.3 | [试验性功能] 缓存图床图片到本地，详见：https://github.com/hugo-fixit/FixIt/pull/362 858 [params.cacheRemoteImages] 859 enable = false 860 # 用本地图片链接替换远程图片链接 861 replace = false 862 863 # FixIt 0.2.17 | NEW 定义自定义文件路径 864 # 在站点目录 `layouts/partials/custom` 中创建您的自定义文件，并取消注释下面需要的文件 865 [params.customFilePath] 866 # aside = \u0026#34;custom/aside.html\u0026#34; 867 # profile = \u0026#34;custom/profile.html\u0026#34; 868 # footer = \u0026#34;custom/footer.html\u0026#34; 869 870 # FixIt 0.2.15 | NEW 开发者选项 871 [params.dev] 872 enable = false 873 # 检查更新 874 c4u = false 875 # 请勿公开展示！ 876 githubToken = \u0026#34;\u0026#34; 877 # 移动端开发者工具配置 878 [params.dev.mDevtools] 879 enable = false 880 # 支持 \u0026#34;vConsole\u0026#34;, \u0026#34;eruda\u0026#34; 881 type = \u0026#34;vConsole\u0026#34; 882 883# ------------------------------------------------------------------------------------- 884# Modules Configuration 885# See: https://gohugo.io/hugo-modules/configuration/#module-config-imports 886# ------------------------------------------------------------------------------------- 887 888[module] 889 [module.hugoVersion] 890 extended = true 891 min = \u0026#34;0.110.0\u0026#34; 892 893# ------------------------------------------------------------------------------------- 894# Markup related configuration in Hugo 895# See: https://gohugo.io/getting-started/configuration-markup/ 896# ------------------------------------------------------------------------------------- 897 898# Hugo 解析文档的配置 899[markup] 900 # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) 901 [markup.highlight] 902 ################## 必要的配置 ################## 903 # https://github.com/hugo-fixit/FixIt/issues/43 904 codeFences = true 905 lineNos = true 906 lineNumbersInTable = true 907 noClasses = false 908 ################## 必要的配置 ################## 909 guessSyntax = true 910 # Goldmark 是 Hugo 0.60 以来的默认 Markdown 解析库 911 [markup.goldmark] 912 [markup.goldmark.extensions] 913 definitionList = true 914 footnote = true 915 linkify = true 916 strikethrough = true 917 table = true 918 taskList = true 919 typographer = true 920 [markup.goldmark.renderer] 921 # 是否在文档中直接使用 HTML 标签 922 unsafe = true 923 # Table Of Contents settings 924 [markup.tableOfContents] 925 startLevel = 2 926 # endLevel = 4 927 928# ------------------------------------------------------------------------------------- 929# Sitemap Configuration 930# See: https://gohugo.io/templates/sitemap-template/#configuration 931# ------------------------------------------------------------------------------------- 932 933# 网站地图配置 934[sitemap] 935 changefreq = \u0026#34;daily\u0026#34; 936 filename = \u0026#34;sitemap.xml\u0026#34; 937 priority = 0.5 938 939# ------------------------------------------------------------------------------------- 940# Permalinks Configuration 941# See: https://gohugo.io/content-management/urls/#permalinks 942# ------------------------------------------------------------------------------------- 943 944# Permalinks 配置 (https://gohugo.io/content-management/urls#permalinks) 945[Permalinks] 946 # posts = \u0026#34;:year/:month/:filename\u0026#34; 947 posts = \u0026#34;/posts/:slug\u0026#34; 948 949# ------------------------------------------------------------------------------------- 950# Privacy Configuration 951# See: https://gohugo.io/about/hugo-and-gdpr/ 952# ------------------------------------------------------------------------------------- 953# 隐私信息配置 (https://gohugo.io/about/hugo-and-gdpr/) 954[privacy] 955 [privacy.twitter] 956 enableDNT = true 957 [privacy.youtube] 958 privacyEnhanced = true 959 960# ------------------------------------------------------------------------------------- 961# Media Types 962# See: https://gohugo.io/templates/output-formats/#media-types 963# ------------------------------------------------------------------------------------- 964 965[mediaTypes] 966 # 用于输出 Markdown 格式文档的设置 967 [mediaTypes.\u0026#34;text/markdown\u0026#34;] 968 suffixes = [\u0026#34;md\u0026#34;] 969 # 用于输出 txt 格式文档的设置 970 [mediaTypes.\u0026#34;text/plain\u0026#34;] 971 suffixes = [\u0026#34;txt\u0026#34;] 972 973# ------------------------------------------------------------------------------------- 974# Output Format Definitions 975# See: https://gohugo.io/templates/output-formats/#output-format-definitions 976# ------------------------------------------------------------------------------------- 977 978[outputFormats] 979 # 用于输出 Markdown 格式文档的设置 980 [outputFormats.MarkDown] 981 mediaType = \u0026#34;text/markdown\u0026#34; 982 isPlainText = true 983 isHTML = false 984 # 用于输出 baidu_urls.txt 文件的设置 985 [outputFormats.BaiduUrls] 986 baseName = \u0026#34;baidu_urls\u0026#34; 987 mediaType = \u0026#34;text/plain\u0026#34; 988 isPlainText = true 989 isHTML = false 990 991# ------------------------------------------------------------------------------------- 992# Customizing Output Formats 993# See: https://gohugo.io/templates/output-formats/#customizing-output-formats 994# ------------------------------------------------------------------------------------- 995# 用于 Hugo 输出文档的设置 996[outputs] 997 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;, \u0026#34;BaiduUrls\u0026#34;] 998 page = [\u0026#34;HTML\u0026#34;] 999 section = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] 1000 taxonomy = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] 1001 taxonomyTerm = [\u0026#34;HTML\u0026#34;] 1002 1003# ------------------------------------------------------------------------------------- 1004# Taxonomies Configuration 1005# See: https://gohugo.io/content-management/taxonomies/#configure-taxonomies 1006# ------------------------------------------------------------------------------------- 1007 1008[taxonomies] 1009 # series = \u0026#34;series\u0026#34; 1010 category = \u0026#34;categories\u0026#34; 1011 tag = \u0026#34;tags\u0026#34; 1012 collections = \u0026#34;collections\u0026#34; 2.3 修改文章前缀模板 在每篇 markdown 文章最前面可以用一部分注释来告诉主题，这篇文章的属性，譬如文章标签、分类、是否为草稿等。\n2.4 创建你的第一篇文章 创建新文章的命令：\n1hugo new posts/文章标题.md 执行完成后，在./content/posts目录下应该可以看到新文件，同时里面已经有 markdown 模版中的文章前缀参数。\n2.5 本地调试 1hugo serve -D --disableFastRender 3、Github 3.1 创建SSH密钥并添加 3.2 生成 SSH 密钥\n使用 Git Bash 或命令行打开终端窗口，输入以下命令。记得把your_email@example.com改成你自己的邮箱地址。\n1``ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34;` 按照提示键入您想要保存密钥的文件名和路径，或使用默认设置。\n接下来，系统将生成一个随机字符串作为密钥密码。此处可以选用默认密码以便于不需要输入密码进行 SSH 登录。进入生成密钥的文件夹，查看密钥：\n登录到 GitHub 账户，并转到“Settings”（设置）中的“SSH and GPG keys”（SSH 和 GPG 密钥）页面。\n点击“New SSH key”（新建 SSH 密钥），填写标题和密钥的内容。\n打开id_rsa.pub公钥文件 (即你在生成的时候保存的文件) ，将其内容复制到 GitHub 的 “Key” 字段中。\n最后，点击“Add SSH key” （添加 SSH 密钥），完成密钥添加。\n3.4 创建 blog 仓库 用于存储博客源文件，也就是刚才的本地项目文件。\n在 GitHub 网站上登录你的账号，然后点击页面右上角的加号图标，选择 “New repository”（新建仓库）。 在 “Initialize this repository with”（使用以下方式初始化仓库）部分，选择 “Add a README file”（添加一个 README 文件）选项。 暂存并提交现有文件 1 2 git add . git commit -m \u0026quot;init blog files\u0026quot; 点击 “Create repository”（创建仓库）按钮，完成 GitHub 仓库的创建。\n将本地仓库与远程 GitHub 仓库关联起来。在项目目录中打开 Git Bash，执行以下命令，将 \u0026lt;remote-url\u0026gt; 替换为你的 GitHub 仓库的远程 URL：\n1 git remote add origin \u0026lt;remote-url\u0026gt; 例如：\n1 git remote add origin https://github.com/your-username/your-repository.git 将本地代码推送到远程仓库的 main 分支。执行以下命令： 1 git push -u origin main 这将把本地的代码推送到远程仓库的 main 分支，并将其设置为默认上游分支。\n3.5 创建Github Pages公开仓库 用于实际展示博客。\n创建新仓库\nRepository name 这里一定要填 [你的github账号].github.io。你的github账号必须小写字母。仓库可见性设为Public。选择“使用 README 初始化此存储库”。\n3.6 上传页面 1hugo 执行后，站点根目录下会生成一个 public 文件夹，该文件下的内容即 Hugo 生成的整个静态网站。每次更新内容后，将 pubilc 目录里所有文件 push 到 GitHub Pages 所在的仓库即可。\n首次使用的时候要执行以下命令：\n1cd public 2git init 3git remote add origin https://github.com/leegical/leegical.github.io.git # 将本地目录链接到远程服务器的代码仓库 4git add . 5git commit -m \u0026#34;[介绍，随便写点什么，比如日期]\u0026#34; 6git push -u origin master 进入 Github Pages 仓库的Setting-Pages，把Branch修改为master，点击 save。\n稍等几分钟即可通过[你的github账号].github.io来访问博客站点了，和hugo serve -D本地调试完全一致。\n3.5 Github Action 自动发布 通过上述命令我们可以手动发布我们的静态文件，但还是有以下弊端：\n发布步骤还是比较繁琐，本地调试后还需要切换到 public/ 目录进行上传 无法对博客 .md 源文件进行备份与版本管理 可以通过官方提供的 GitHub Action 进行 CI 自动发布。 回到 blog 仓库的本地文件夹，新增.github/workflows/deploy.yml\n1 2 3 mkdir .github mkdir .github/workflows touch .github/workflows/deploy.yml 用 vscode 编辑 deploy.yml 的内容，参考如下：\n注意：EXTERNAL_REPOSITORY要修改为 Github Pages 的链接\n提交变更到 Github：\n1 2 3 git add . git commit -m \u0026quot;add action config\u0026quot; git push 进入 Github tokens ，点击Generate new token——Generate new token (classic)\nNote：随便写\nExpiration：No expiration\nSelect scopes：只勾选\n1repo 拉到最下面，点击生成。\n注意生成的 token 只会显示这一次，形如 ghp_xxxxxxxxxx，点击复制。 回到 blog 仓库——Setting，新建仓库密钥\nName：PERSONAL_TOKEN\nSecret：填刚才复制的密钥\n4 自定义博客域名 你的github账户名.github.io的网址在国内访问速度较慢，为博客设置一个自定义域名可以有效加快速度。以本博客为例，要设置的自定义域名为：haoyep.com。\n4.1 Cloudflare 配置 使用 Cloudflare 托管域名，这一点教程很多，跟着做就行。\n在 DNS 配置中，新增一条 CNAME 解析记录到你的github账户名.github.io，不启用代理。\n4.2 hugo 配置 在 static 中添加 CNAME 文件，内容为自定义域名为 haoyep.com。\nhugo.toml 修改 baseURL 为自定义域名为 haoyep.com。\n提交到 Github 仓库\n1 2 3 4 hugo git add . git commit -m \u0026quot;Create CNAME\u0026quot; git push 4.3 Github Pages 仓库配置 为自定义域名启用 SSL 证书。 Settings——Pages——Custom domain，勾选 Enforce HTTPS。 5 总结 以上整个环境部署好之后，接下来的常用命令就是以下几个：\n站点目录下，新建文章，执行： 1 hugo new posts/文章名.md 使用VScode编辑文章内容或修改，包括修改主题之类的。在本地进行调试: 1 hugo serve -D --disableFastRender 修改完成，确定要上传到 GitHub 上后，站点目录下执行： 1 hugo 进行编译，没错误的话修改的内容就顺利同步到public下了，然后执行提交命令：\n1 2 3 git add . git commit -m \u0026quot;随便写点提交信息\u0026quot; git push 稍等片刻，github action 执行完毕，页面就会更新了。\n","date":"2024-03-20T00:00:00Z","permalink":"https://huuuuuuo.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAhugo+githubpages-copy/","section":"post","tags":["hugo","githubpages","博客搭建"],"title":"博客搭建：Hugo+GithubPages"},{"categories":["Tech"],"contents":"Jekyll就是将纯文本转化为静态博客网站，不需要数据库支持，也没有评论功能，想要评论功能的话可以借助第三方的评论服务。 Jekyll + Github Pages可以让你更加专注于博客内容，而不是如何搭建一个博客平台。\n1、安装ruby 下载ruby+devkit\nhttps://rubyinstaller.org/downloads/\n这一步出现了很多问题，最后的解决方法是，\n卸载，重装，ruby的默认安装地址不要变！\n验证：\n1ruby -v 2 3gem -v 然后安装 jekyll ：\n1gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ 2gem sources -l 3 4gem install jekyll 5gem install jekyll-paginate 6jekyll -v 再安装 bundler ：\n1gem install bundler ","date":"2024-03-20T00:00:00Z","permalink":"https://huuuuuuo.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAjekyll+githubpages/","section":"post","tags":["jekyll","githubpages"],"title":"博客搭建：Jekyll+GithubPages"},{"categories":["Tech"],"contents":"1 failed to push some refs 报错 1git push -u origin main 2To https://github.com/xxxx.git 3 ! [rejected] main -\u0026gt; main (non-fast-forward) 4error: failed to push some refs to \u0026#39;https://github.com/xxxx.git\u0026#39; 5hint: Updates were rejected because the tip of your current branch is behind 6hint: its remote counterpart. Integrate the remote changes (e.g. 7hint: \u0026#39;git pull ...\u0026#39;) before pushing again. 8hint: See the \u0026#39;Note about fast-forwards\u0026#39; in \u0026#39;git push --help\u0026#39; for details. 1.1 解决方案： 错误消息表明本地分支位于远程分支后面，并且 Git 阻止我推送更改以避免覆盖远程更改。如果其他人已将提交推送到本地没有的远程分支，则可能会出现这种情况。若要解决此问题，需要先将远程更改集成到本地分支中，然后才能推送更改。以下是步骤：\n1.1.1 Fetch the Remote Changes: First, you need to fetch the changes from the remote repository without merging them into your local branch. This ensures that you have the latest changes from the remote repository but keeps your local branch unchanged. 获取远程更改：首先，你需要从远程存储库获取更改，而无需将它们合并到本地分支中。这可确保你拥有来自远程存储库的最新更改，但保持本地分支不变。\n1git fetch origin 1.1.2 Merge or Rebase: After fetching the changes, you have two main options to integrate the remote changes into your local branch: 合并或变基：获取更改后，你有两个主要选项将远程更改集成到本地分支中：\n1- **Merge**: This will create a new merge commit in your local branch that combines your changes with the changes from the remote branch. 2git merge origin/main Rebase: This will replay your local commits on top of the remote changes, creating a linear history. This is a cleaner approach but can be more complex if there are conflicts. 变基：这将在远程更改之上重放你的本地提交，从而创建线性历史记录。这是一种更简洁的方法，但如果存在冲突，可能会更复杂。 1git rebase origin/main If you choose to rebase and encounter conflicts, you\u0026rsquo;ll need to resolve them manually. After resolving conflicts, continue the rebase with git rebase --continue. 如果选择变基并遇到冲突，则需要手动解决它们。解决冲突后，继续使用 git rebase --continue .\n1.1.3 Push Your Changes: Once you\u0026rsquo;ve integrated the remote changes into your local branch, you can push your changes to the remote repository. If you\u0026rsquo;ve rebased, you might need to force push, but be cautious as this can overwrite history on the remote repository. 推送更改：将远程更改集成到本地分支后，可以将更改推送到远程存储库。如果已变基，则可能需要强制推送，但要小心，因为这可能会覆盖远程存储库上的历史记录。\n1git push origin main If you\u0026rsquo;ve merged and there are no conflicts, a simple push should work. If you\u0026rsquo;ve rebased and need to force push, use: 如果已合并并且没有冲突，则简单的推送应该可以工作。如果你已重新定位并需要强制推送，请使用：\n1git push -f origin main Remember, force pushing (git push -f) should be used with caution, especially in shared repositories, as it can overwrite history and potentially cause issues for other collaborators. Always communicate with your team before force pushing. 请记住，应谨慎使用强制推送 （ git push -f ），尤其是在共享存储库中，因为它可能会覆盖历史记录并可能给其他协作者带来问题。在强制推动之前，请务必与你的团队沟通。\n2 Empty reply from server报错 or Timed out报错 1git push -u origin main 2fatal: unable to access \u0026#39;https://github.com/HuuuuuuO/blog.git/\u0026#39;: Empty reply from server 或者为：\n1git push -f origin main 2fatal: unable to access \u0026#39;https://github.com/HuuuuuuO/blog.git/\u0026#39;: Failed to connect to github.com port 443: Timed out 2.1 解决方案： 2.1.1 检查 SSH 访问： 如果使用 SSH 连接到 GitHub，请确保将 SSH 密钥正确添加到 GitHub 帐户。您可以使用命令 ssh -T git@github.com 测试 SSH 连接。如果您收到成功的身份验证消息，则您的 SSH 设置是正确的。\n1ssh -T git@github.com 2.使用 SSH 而不是 HTTPS： 如果当前使用 HTTPS 推送到 GitHub，请尝试切换到 SSH。这有时可以绕过与 HTTPS 连接相关的问题。您可以将远程 URL 更改为通过命令 git remote set-url origin git@github.com:HuuuuuuO/blog.git 使用 SSH。\n1git remote set-url origin git@github.com:HuuuuuuO/blog.git 3.进行push 1git push origin main 成功。\n","date":"2024-03-19T19:30:42+08:00","permalink":"https://huuuuuuo.github.io/post/git%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","section":"post","tags":["git","branch","分支","git bug"],"title":"git push：本地分支和远程分支冲突问题解决"},{"categories":null,"contents":"About Me Hello ~\nIf you\u0026rsquo;ve got something to say, just leave a comment😊 ~\n","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/about/","section":"","tags":null,"title":"About"},{"categories":null,"contents":"","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/memos/","section":"","tags":null,"title":"Memos"},{"categories":null,"contents":"","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/movies/","section":"","tags":null,"title":"Movies"},{"categories":null,"contents":"","date":"0001-01-01T00:00:00Z","permalink":"https://huuuuuuo.github.io/archive/","section":"","tags":null,"title":"Timeline"}]